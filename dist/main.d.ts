import * as styled_components from 'styled-components';
import * as styled_components_dist_types from 'styled-components/dist/types';
import * as react from 'react';
import { CSSProperties, FC, PropsWithChildren } from 'react';
import * as csstype from 'csstype';
import { Property, Globals } from 'csstype';

declare class AllCssRules implements Required<CSSProperties> {
    accentColor: Property.AccentColor;
    alignContent: Property.AlignContent;
    alignItems: Property.AlignItems;
    alignSelf: Property.AlignSelf;
    alignTracks: Property.AlignTracks;
    animationComposition: Property.AnimationComposition;
    animationDelay: Property.AnimationDelay<string & {}>;
    animationDirection: Property.AnimationDirection;
    animationDuration: Property.AnimationDuration<string & {}>;
    animationFillMode: Property.AnimationFillMode;
    animationIterationCount: Property.AnimationIterationCount;
    animationName: Property.AnimationName;
    animationPlayState: Property.AnimationPlayState;
    animationTimeline: Property.AnimationTimeline;
    animationTimingFunction: Property.AnimationTimingFunction;
    appearance: Property.Appearance;
    aspectRatio: Property.AspectRatio;
    backdropFilter: Property.BackdropFilter;
    backfaceVisibility: Property.BackfaceVisibility;
    backgroundAttachment: Property.BackgroundAttachment;
    backgroundBlendMode: Property.BackgroundBlendMode;
    backgroundClip: Property.BackgroundClip;
    backgroundColor: Property.BackgroundColor;
    backgroundImage: Property.BackgroundImage;
    backgroundOrigin: Property.BackgroundOrigin;
    backgroundPositionX: Property.BackgroundPositionX<string | number>;
    backgroundPositionY: Property.BackgroundPositionY<string | number>;
    backgroundRepeat: Property.BackgroundRepeat;
    backgroundSize: Property.BackgroundSize<string | number>;
    blockOverflow: Property.BlockOverflow;
    blockSize: Property.BlockSize<string | number>;
    borderBlockColor: Property.BorderBlockColor;
    borderBlockEndColor: Property.BorderBlockEndColor;
    borderBlockEndStyle: Property.BorderBlockEndStyle;
    borderBlockEndWidth: Property.BorderBlockEndWidth<string | number>;
    borderBlockStartColor: Property.BorderBlockStartColor;
    borderBlockStartStyle: Property.BorderBlockStartStyle;
    borderBlockStartWidth: Property.BorderBlockStartWidth<string | number>;
    borderBlockStyle: Property.BorderBlockStyle;
    borderBlockWidth: Property.BorderBlockWidth<string | number>;
    borderBottomColor: Property.BorderBottomColor;
    borderBottomLeftRadius: Property.BorderBottomLeftRadius<string | number>;
    borderBottomRightRadius: Property.BorderBottomRightRadius<string | number>;
    borderBottomStyle: Property.BorderBottomStyle;
    borderBottomWidth: Property.BorderBottomWidth<string | number>;
    borderCollapse: Property.BorderCollapse;
    borderEndEndRadius: Property.BorderEndEndRadius<string | number>;
    borderEndStartRadius: Property.BorderEndStartRadius<string | number>;
    borderImageOutset: Property.BorderImageOutset<string | number>;
    borderImageRepeat: Property.BorderImageRepeat;
    borderImageSlice: Property.BorderImageSlice;
    borderImageSource: Property.BorderImageSource;
    borderImageWidth: Property.BorderImageWidth<string | number>;
    borderInlineColor: Property.BorderInlineColor;
    borderInlineEndColor: Property.BorderInlineEndColor;
    borderInlineEndStyle: Property.BorderInlineEndStyle;
    borderInlineEndWidth: Property.BorderInlineEndWidth<string | number>;
    borderInlineStartColor: Property.BorderInlineStartColor;
    borderInlineStartStyle: Property.BorderInlineStartStyle;
    borderInlineStartWidth: Property.BorderInlineStartWidth<string | number>;
    borderInlineStyle: Property.BorderInlineStyle;
    borderInlineWidth: Property.BorderInlineWidth<string | number>;
    borderLeftColor: Property.BorderLeftColor;
    borderLeftStyle: Property.BorderLeftStyle;
    borderLeftWidth: Property.BorderLeftWidth<string | number>;
    borderRightColor: Property.BorderRightColor;
    borderRightStyle: Property.BorderRightStyle;
    borderRightWidth: Property.BorderRightWidth<string | number>;
    borderSpacing: Property.BorderSpacing<string | number>;
    borderStartEndRadius: Property.BorderStartEndRadius<string | number>;
    borderStartStartRadius: Property.BorderStartStartRadius<string | number>;
    borderTopColor: Property.BorderTopColor;
    borderTopLeftRadius: Property.BorderTopLeftRadius<string | number>;
    borderTopRightRadius: Property.BorderTopRightRadius<string | number>;
    borderTopStyle: Property.BorderTopStyle;
    borderTopWidth: Property.BorderTopWidth<string | number>;
    bottom: Property.Bottom<string | number>;
    boxDecorationBreak: Property.BoxDecorationBreak;
    boxShadow: Property.BoxShadow;
    boxSizing: Property.BoxSizing;
    breakAfter: Property.BreakAfter;
    breakBefore: Property.BreakBefore;
    breakInside: Property.BreakInside;
    captionSide: Property.CaptionSide;
    caretColor: Property.CaretColor;
    caretShape: Property.CaretShape;
    clear: Property.Clear;
    clipPath: Property.ClipPath;
    color: Property.Color;
    colorAdjust: Property.PrintColorAdjust;
    colorScheme: Property.ColorScheme;
    columnCount: Property.ColumnCount;
    columnFill: Property.ColumnFill;
    columnGap: Property.ColumnGap<string | number>;
    columnRuleColor: Property.ColumnRuleColor;
    columnRuleStyle: Property.ColumnRuleStyle;
    columnRuleWidth: Property.ColumnRuleWidth<string | number>;
    columnSpan: Property.ColumnSpan;
    columnWidth: Property.ColumnWidth<string | number>;
    contain: Property.Contain;
    containIntrinsicBlockSize: Property.ContainIntrinsicBlockSize<string | number>;
    containIntrinsicHeight: Property.ContainIntrinsicHeight<string | number>;
    containIntrinsicInlineSize: Property.ContainIntrinsicInlineSize<string | number>;
    containIntrinsicWidth: Property.ContainIntrinsicWidth<string | number>;
    containerName: Property.ContainerName;
    containerType: Property.ContainerType;
    content: Property.Content;
    contentVisibility: Property.ContentVisibility;
    counterIncrement: Property.CounterIncrement;
    counterReset: Property.CounterReset;
    counterSet: Property.CounterSet;
    cursor: Property.Cursor;
    direction: Property.Direction;
    display: Property.Display;
    emptyCells: Property.EmptyCells;
    filter: Property.Filter;
    flexBasis: Property.FlexBasis<string | number>;
    flexDirection: Property.FlexDirection;
    flexGrow: Property.FlexGrow;
    flexShrink: Property.FlexShrink;
    flexWrap: Property.FlexWrap;
    float: Property.Float;
    fontFamily: Property.FontFamily;
    fontFeatureSettings: Property.FontFeatureSettings;
    fontKerning: Property.FontKerning;
    fontLanguageOverride: Property.FontLanguageOverride;
    fontOpticalSizing: Property.FontOpticalSizing;
    fontPalette: Property.FontPalette;
    fontSize: Property.FontSize<string | number>;
    fontSizeAdjust: Property.FontSizeAdjust;
    fontSmooth: Property.FontSmooth<string | number>;
    fontStretch: Property.FontStretch;
    fontStyle: Property.FontStyle;
    fontSynthesis: Property.FontSynthesis;
    fontVariant: Property.FontVariant;
    fontVariantAlternates: Property.FontVariantAlternates;
    fontVariantCaps: Property.FontVariantCaps;
    fontVariantEastAsian: Property.FontVariantEastAsian;
    fontVariantEmoji: Property.FontVariantEmoji;
    fontVariantLigatures: Property.FontVariantLigatures;
    fontVariantNumeric: Property.FontVariantNumeric;
    fontVariantPosition: Property.FontVariantPosition;
    fontVariationSettings: Property.FontVariationSettings;
    fontWeight: Property.FontWeight;
    forcedColorAdjust: Property.ForcedColorAdjust;
    gridAutoColumns: Property.GridAutoColumns<string | number>;
    gridAutoFlow: Property.GridAutoFlow;
    gridAutoRows: Property.GridAutoRows<string | number>;
    gridColumnEnd: Property.GridColumnEnd;
    gridColumnStart: Property.GridColumnStart;
    gridRowEnd: Property.GridRowEnd;
    gridRowStart: Property.GridRowStart;
    gridTemplateAreas: Property.GridTemplateAreas;
    gridTemplateColumns: Property.GridTemplateColumns<string | number>;
    gridTemplateRows: Property.GridTemplateRows<string | number>;
    hangingPunctuation: Property.HangingPunctuation;
    height: Property.Height<string | number>;
    hyphenateCharacter: Property.HyphenateCharacter;
    hyphenateLimitChars: Property.HyphenateLimitChars;
    hyphens: Property.Hyphens;
    imageOrientation: Property.ImageOrientation;
    imageRendering: Property.ImageRendering;
    imageResolution: Property.ImageResolution;
    initialLetter: Property.InitialLetter;
    inlineSize: Property.InlineSize<string | number>;
    inputSecurity: Property.InputSecurity;
    insetBlockEnd: Property.InsetBlockEnd<string | number>;
    insetBlockStart: Property.InsetBlockStart<string | number>;
    insetInlineEnd: Property.InsetInlineEnd<string | number>;
    insetInlineStart: Property.InsetInlineStart<string | number>;
    isolation: Property.Isolation;
    justifyContent: Property.JustifyContent;
    justifyItems: Property.JustifyItems;
    justifySelf: Property.JustifySelf;
    justifyTracks: Property.JustifyTracks;
    left: Property.Left<string | number>;
    letterSpacing: Property.LetterSpacing<string | number>;
    lineBreak: Property.LineBreak;
    lineHeight: Property.LineHeight<string | number>;
    lineHeightStep: Property.LineHeightStep<string | number>;
    listStyleImage: Property.ListStyleImage;
    listStylePosition: Property.ListStylePosition;
    listStyleType: Property.ListStyleType;
    marginBlockEnd: Property.MarginBlockEnd<string | number>;
    marginBlockStart: Property.MarginBlockStart<string | number>;
    marginBottom: Property.MarginBottom<string | number>;
    marginInlineEnd: Property.MarginInlineEnd<string | number>;
    marginInlineStart: Property.MarginInlineStart<string | number>;
    marginLeft: Property.MarginLeft<string | number>;
    marginRight: Property.MarginRight<string | number>;
    marginTop: Property.MarginTop<string | number>;
    marginTrim: Property.MarginTrim;
    maskBorderMode: Property.MaskBorderMode;
    maskBorderOutset: Property.MaskBorderOutset<string | number>;
    maskBorderRepeat: Property.MaskBorderRepeat;
    maskBorderSlice: Property.MaskBorderSlice;
    maskBorderSource: Property.MaskBorderSource;
    maskBorderWidth: Property.MaskBorderWidth<string | number>;
    maskClip: Property.MaskClip;
    maskComposite: Property.MaskComposite;
    maskImage: Property.MaskImage;
    maskMode: Property.MaskMode;
    maskOrigin: Property.MaskOrigin;
    maskPosition: Property.MaskPosition<string | number>;
    maskRepeat: Property.MaskRepeat;
    maskSize: Property.MaskSize<string | number>;
    maskType: Property.MaskType;
    mathDepth: Property.MathDepth;
    mathShift: Property.MathShift;
    mathStyle: Property.MathStyle;
    maxBlockSize: Property.MaxBlockSize<string | number>;
    maxHeight: Property.MaxHeight<string | number>;
    maxInlineSize: Property.MaxInlineSize<string | number>;
    maxLines: Property.MaxLines;
    maxWidth: Property.MaxWidth<string | number>;
    minBlockSize: Property.MinBlockSize<string | number>;
    minHeight: Property.MinHeight<string | number>;
    minInlineSize: Property.MinInlineSize<string | number>;
    minWidth: Property.MinWidth<string | number>;
    mixBlendMode: Property.MixBlendMode;
    motionDistance: Property.OffsetDistance<string | number>;
    motionPath: Property.OffsetPath;
    motionRotation: Property.OffsetRotate;
    objectFit: Property.ObjectFit;
    objectPosition: Property.ObjectPosition<string | number>;
    offsetAnchor: Property.OffsetAnchor<string | number>;
    offsetDistance: Property.OffsetDistance<string | number>;
    offsetPath: Property.OffsetPath;
    offsetPosition: Property.OffsetPosition<string | number>;
    offsetRotate: Property.OffsetRotate;
    offsetRotation: Property.OffsetRotate;
    opacity: Property.Opacity;
    order: Property.Order;
    orphans: Property.Orphans;
    outlineColor: Property.OutlineColor;
    outlineOffset: Property.OutlineOffset<string | number>;
    outlineStyle: Property.OutlineStyle;
    outlineWidth: Property.OutlineWidth<string | number>;
    overflowAnchor: Property.OverflowAnchor;
    overflowBlock: Property.OverflowBlock;
    overflowClipBox: Property.OverflowClipBox;
    overflowClipMargin: Property.OverflowClipMargin<string | number>;
    overflowInline: Property.OverflowInline;
    overflowWrap: Property.OverflowWrap;
    overflowX: Property.OverflowX;
    overflowY: Property.OverflowY;
    overscrollBehaviorBlock: Property.OverscrollBehaviorBlock;
    overscrollBehaviorInline: Property.OverscrollBehaviorInline;
    overscrollBehaviorX: Property.OverscrollBehaviorX;
    overscrollBehaviorY: Property.OverscrollBehaviorY;
    paddingBlockEnd: Property.PaddingBlockEnd<string | number>;
    paddingBlockStart: Property.PaddingBlockStart<string | number>;
    paddingBottom: Property.PaddingBottom<string | number>;
    paddingInlineEnd: Property.PaddingInlineEnd<string | number>;
    paddingInlineStart: Property.PaddingInlineStart<string | number>;
    paddingLeft: Property.PaddingLeft<string | number>;
    paddingRight: Property.PaddingRight<string | number>;
    paddingTop: Property.PaddingTop<string | number>;
    page: Property.Page;
    pageBreakAfter: Property.PageBreakAfter;
    pageBreakBefore: Property.PageBreakBefore;
    pageBreakInside: Property.PageBreakInside;
    paintOrder: Property.PaintOrder;
    perspective: Property.Perspective<string | number>;
    perspectiveOrigin: Property.PerspectiveOrigin<string | number>;
    pointerEvents: Property.PointerEvents;
    position: Property.Position;
    printColorAdjust: Property.PrintColorAdjust;
    quotes: Property.Quotes;
    resize: Property.Resize;
    right: Property.Right<string | number>;
    rotate: Property.Rotate;
    rowGap: Property.RowGap<string | number>;
    rubyAlign: Property.RubyAlign;
    rubyMerge: Property.RubyMerge;
    rubyPosition: Property.RubyPosition;
    scale: Property.Scale;
    scrollBehavior: Property.ScrollBehavior;
    scrollMarginBlockEnd: Property.ScrollMarginBlockEnd<string | number>;
    scrollMarginBlockStart: Property.ScrollMarginBlockStart<string | number>;
    scrollMarginBottom: Property.ScrollMarginBottom<string | number>;
    scrollMarginInlineEnd: Property.ScrollMarginInlineEnd<string | number>;
    scrollMarginInlineStart: Property.ScrollMarginInlineStart<string | number>;
    scrollMarginLeft: Property.ScrollMarginLeft<string | number>;
    scrollMarginRight: Property.ScrollMarginRight<string | number>;
    scrollMarginTop: Property.ScrollMarginTop<string | number>;
    scrollPaddingBlockEnd: Property.ScrollPaddingBlockEnd<string | number>;
    scrollPaddingBlockStart: Property.ScrollPaddingBlockStart<string | number>;
    scrollPaddingBottom: Property.ScrollPaddingBottom<string | number>;
    scrollPaddingInlineEnd: Property.ScrollPaddingInlineEnd<string | number>;
    scrollPaddingInlineStart: Property.ScrollPaddingInlineStart<string | number>;
    scrollPaddingLeft: Property.ScrollPaddingLeft<string | number>;
    scrollPaddingRight: Property.ScrollPaddingRight<string | number>;
    scrollPaddingTop: Property.ScrollPaddingTop<string | number>;
    scrollSnapAlign: Property.ScrollSnapAlign;
    scrollSnapMarginBottom: Property.ScrollMarginBottom<string | number>;
    scrollSnapMarginLeft: Property.ScrollMarginLeft<string | number>;
    scrollSnapMarginRight: Property.ScrollMarginRight<string | number>;
    scrollSnapMarginTop: Property.ScrollMarginTop<string | number>;
    scrollSnapStop: Property.ScrollSnapStop;
    scrollSnapType: Property.ScrollSnapType;
    scrollTimelineAxis: Property.ScrollTimelineAxis;
    scrollTimelineName: Property.ScrollTimelineName;
    scrollbarColor: Property.ScrollbarColor;
    scrollbarGutter: Property.ScrollbarGutter;
    scrollbarWidth: Property.ScrollbarWidth;
    shapeImageThreshold: Property.ShapeImageThreshold;
    shapeMargin: Property.ShapeMargin<string | number>;
    shapeOutside: Property.ShapeOutside;
    tabSize: Property.TabSize<string | number>;
    tableLayout: Property.TableLayout;
    textAlign: Property.TextAlign;
    textAlignLast: Property.TextAlignLast;
    textCombineUpright: Property.TextCombineUpright;
    textDecorationColor: Property.TextDecorationColor;
    textDecorationLine: Property.TextDecorationLine;
    textDecorationSkip: Property.TextDecorationSkip;
    textDecorationSkipInk: Property.TextDecorationSkipInk;
    textDecorationStyle: Property.TextDecorationStyle;
    textDecorationThickness: Property.TextDecorationThickness<string | number>;
    textEmphasisColor: Property.TextEmphasisColor;
    textEmphasisPosition: Property.TextEmphasisPosition;
    textEmphasisStyle: Property.TextEmphasisStyle;
    textIndent: Property.TextIndent<string | number>;
    textJustify: Property.TextJustify;
    textOrientation: Property.TextOrientation;
    textOverflow: Property.TextOverflow;
    textRendering: Property.TextRendering;
    textShadow: Property.TextShadow;
    textSizeAdjust: Property.TextSizeAdjust;
    textTransform: Property.TextTransform;
    textUnderlineOffset: Property.TextUnderlineOffset<string | number>;
    textUnderlinePosition: Property.TextUnderlinePosition;
    top: Property.Top<string | number>;
    touchAction: Property.TouchAction;
    transform: Property.Transform;
    transformBox: Property.TransformBox;
    transformOrigin: Property.TransformOrigin<string | number>;
    transformStyle: Property.TransformStyle;
    transitionDelay: Property.TransitionDelay<string & {}>;
    transitionDuration: Property.TransitionDuration<string & {}>;
    transitionProperty: Property.TransitionProperty;
    transitionTimingFunction: Property.TransitionTimingFunction;
    translate: Property.Translate<string | number>;
    unicodeBidi: Property.UnicodeBidi;
    userSelect: Property.UserSelect;
    verticalAlign: Property.VerticalAlign<string | number>;
    viewTransitionName: Property.ViewTransitionName;
    visibility: Property.Visibility;
    whiteSpace: Property.WhiteSpace;
    widows: Property.Widows;
    width: Property.Width<string | number>;
    willChange: Property.WillChange;
    wordBreak: Property.WordBreak;
    wordSpacing: Property.WordSpacing<string | number>;
    wordWrap: Property.WordWrap;
    writingMode: Property.WritingMode;
    zIndex: Property.ZIndex;
    zoom: Property.Zoom;
    all: Globals;
    animation: Property.Animation<string & {}>;
    background: Property.Background<string | number>;
    backgroundPosition: Property.BackgroundPosition<string | number>;
    border: Property.Border<string | number>;
    borderBlock: Property.BorderBlock<string | number>;
    borderBlockEnd: Property.BorderBlockEnd<string | number>;
    borderBlockStart: Property.BorderBlockStart<string | number>;
    borderBottom: Property.BorderBottom<string | number>;
    borderColor: Property.BorderColor;
    borderImage: Property.BorderImage;
    borderInline: Property.BorderInline<string | number>;
    borderInlineEnd: Property.BorderInlineEnd<string | number>;
    borderInlineStart: Property.BorderInlineStart<string | number>;
    borderLeft: Property.BorderLeft<string | number>;
    borderRadius: Property.BorderRadius<string | number>;
    borderRight: Property.BorderRight<string | number>;
    borderStyle: Property.BorderStyle;
    borderTop: Property.BorderTop<string | number>;
    borderWidth: Property.BorderWidth<string | number>;
    caret: Property.Caret;
    columnRule: Property.ColumnRule<string | number>;
    columns: Property.Columns<string | number>;
    containIntrinsicSize: Property.ContainIntrinsicSize<string | number>;
    container: Property.Container;
    flex: Property.Flex<string | number>;
    flexFlow: Property.FlexFlow;
    font: Property.Font;
    gap: Property.Gap<string | number>;
    grid: Property.Grid;
    gridArea: Property.GridArea;
    gridColumn: Property.GridColumn;
    gridRow: Property.GridRow;
    gridTemplate: Property.GridTemplate;
    inset: Property.Inset<string | number>;
    insetBlock: Property.InsetBlock<string | number>;
    insetInline: Property.InsetInline<string | number>;
    lineClamp: Property.LineClamp;
    listStyle: Property.ListStyle;
    margin: Property.Margin<string | number>;
    marginBlock: Property.MarginBlock<string | number>;
    marginInline: Property.MarginInline<string | number>;
    mask: Property.Mask<string | number>;
    maskBorder: Property.MaskBorder;
    motion: Property.Offset<string | number>;
    offset: Property.Offset<string | number>;
    outline: Property.Outline<string | number>;
    overflow: Property.Overflow;
    overscrollBehavior: Property.OverscrollBehavior;
    padding: Property.Padding<string | number>;
    paddingBlock: Property.PaddingBlock<string | number>;
    paddingInline: Property.PaddingInline<string | number>;
    placeContent: Property.PlaceContent;
    placeItems: Property.PlaceItems;
    placeSelf: Property.PlaceSelf;
    scrollMargin: Property.ScrollMargin<string | number>;
    scrollMarginBlock: Property.ScrollMarginBlock<string | number>;
    scrollMarginInline: Property.ScrollMarginInline<string | number>;
    scrollPadding: Property.ScrollPadding<string | number>;
    scrollPaddingBlock: Property.ScrollPaddingBlock<string | number>;
    scrollPaddingInline: Property.ScrollPaddingInline<string | number>;
    scrollSnapMargin: Property.ScrollMargin<string | number>;
    scrollTimeline: Property.ScrollTimeline;
    textDecoration: Property.TextDecoration<string | number>;
    textEmphasis: Property.TextEmphasis;
    transition: Property.Transition<string & {}>;
    MozAnimationDelay: Property.AnimationDelay<string & {}>;
    MozAnimationDirection: Property.AnimationDirection;
    MozAnimationDuration: Property.AnimationDuration<string & {}>;
    MozAnimationFillMode: Property.AnimationFillMode;
    MozAnimationIterationCount: Property.AnimationIterationCount;
    MozAnimationName: Property.AnimationName;
    MozAnimationPlayState: Property.AnimationPlayState;
    MozAnimationTimingFunction: Property.AnimationTimingFunction;
    MozAppearance: Property.MozAppearance;
    MozBackfaceVisibility: Property.BackfaceVisibility;
    MozBinding: Property.MozBinding;
    MozBorderBottomColors: Property.MozBorderBottomColors;
    MozBorderEndColor: Property.BorderInlineEndColor;
    MozBorderEndStyle: Property.BorderInlineEndStyle;
    MozBorderEndWidth: Property.BorderInlineEndWidth<string | number>;
    MozBorderLeftColors: Property.MozBorderLeftColors;
    MozBorderRightColors: Property.MozBorderRightColors;
    MozBorderStartColor: Property.BorderInlineStartColor;
    MozBorderStartStyle: Property.BorderInlineStartStyle;
    MozBorderTopColors: Property.MozBorderTopColors;
    MozBoxSizing: Property.BoxSizing;
    MozColumnCount: Property.ColumnCount;
    MozColumnFill: Property.ColumnFill;
    MozColumnRuleColor: Property.ColumnRuleColor;
    MozColumnRuleStyle: Property.ColumnRuleStyle;
    MozColumnRuleWidth: Property.ColumnRuleWidth<string | number>;
    MozColumnWidth: Property.ColumnWidth<string | number>;
    MozContextProperties: Property.MozContextProperties;
    MozFontFeatureSettings: Property.FontFeatureSettings;
    MozFontLanguageOverride: Property.FontLanguageOverride;
    MozHyphens: Property.Hyphens;
    MozImageRegion: Property.MozImageRegion;
    MozMarginEnd: Property.MarginInlineEnd<string | number>;
    MozMarginStart: Property.MarginInlineStart<string | number>;
    MozOrient: Property.MozOrient;
    MozOsxFontSmoothing: Property.FontSmooth<string | number>;
    MozPaddingEnd: Property.PaddingInlineEnd<string | number>;
    MozPaddingStart: Property.PaddingInlineStart<string | number>;
    MozPerspective: Property.Perspective<string | number>;
    MozPerspectiveOrigin: Property.PerspectiveOrigin<string | number>;
    MozStackSizing: Property.MozStackSizing;
    MozTabSize: Property.TabSize<string | number>;
    MozTextBlink: Property.MozTextBlink;
    MozTextSizeAdjust: Property.TextSizeAdjust;
    MozTransformOrigin: Property.TransformOrigin<string | number>;
    MozTransformStyle: Property.TransformStyle;
    MozTransitionDelay: Property.TransitionDelay<string & {}>;
    MozTransitionDuration: Property.TransitionDuration<string & {}>;
    MozTransitionProperty: Property.TransitionProperty;
    MozTransitionTimingFunction: Property.TransitionTimingFunction;
    MozUserFocus: Property.MozUserFocus;
    MozUserModify: Property.MozUserModify;
    MozUserSelect: Property.UserSelect;
    MozWindowDragging: Property.MozWindowDragging;
    MozWindowShadow: Property.MozWindowShadow;
    msAccelerator: Property.MsAccelerator;
    msBlockProgression: Property.MsBlockProgression;
    msContentZoomChaining: Property.MsContentZoomChaining;
    msContentZoomLimitMax: Property.MsContentZoomLimitMax;
    msContentZoomLimitMin: Property.MsContentZoomLimitMin;
    msContentZoomSnapPoints: Property.MsContentZoomSnapPoints;
    msContentZoomSnapType: Property.MsContentZoomSnapType;
    msContentZooming: Property.MsContentZooming;
    msFilter: Property.MsFilter;
    msFlexDirection: Property.FlexDirection;
    msFlexPositive: Property.FlexGrow;
    msFlowFrom: Property.MsFlowFrom;
    msFlowInto: Property.MsFlowInto;
    msGridColumns: Property.MsGridColumns<string | number>;
    msGridRows: Property.MsGridRows<string | number>;
    msHighContrastAdjust: Property.MsHighContrastAdjust;
    msHyphenateLimitChars: Property.MsHyphenateLimitChars;
    msHyphenateLimitLines: Property.MsHyphenateLimitLines;
    msHyphenateLimitZone: Property.MsHyphenateLimitZone<string | number>;
    msHyphens: Property.Hyphens;
    msImeAlign: Property.MsImeAlign;
    msLineBreak: Property.LineBreak;
    msOrder: Property.Order;
    msOverflowStyle: Property.MsOverflowStyle;
    msOverflowX: Property.OverflowX;
    msOverflowY: Property.OverflowY;
    msScrollChaining: Property.MsScrollChaining;
    msScrollLimitXMax: Property.MsScrollLimitXMax<string | number>;
    msScrollLimitXMin: Property.MsScrollLimitXMin<string | number>;
    msScrollLimitYMax: Property.MsScrollLimitYMax<string | number>;
    msScrollLimitYMin: Property.MsScrollLimitYMin<string | number>;
    msScrollRails: Property.MsScrollRails;
    msScrollSnapPointsX: Property.MsScrollSnapPointsX;
    msScrollSnapPointsY: Property.MsScrollSnapPointsY;
    msScrollSnapType: Property.MsScrollSnapType;
    msScrollTranslation: Property.MsScrollTranslation;
    msScrollbar3dlightColor: Property.MsScrollbar3dlightColor;
    msScrollbarArrowColor: Property.MsScrollbarArrowColor;
    msScrollbarBaseColor: Property.MsScrollbarBaseColor;
    msScrollbarDarkshadowColor: Property.MsScrollbarDarkshadowColor;
    msScrollbarFaceColor: Property.MsScrollbarFaceColor;
    msScrollbarHighlightColor: Property.MsScrollbarHighlightColor;
    msScrollbarShadowColor: Property.MsScrollbarShadowColor;
    msScrollbarTrackColor: Property.MsScrollbarTrackColor;
    msTextAutospace: Property.MsTextAutospace;
    msTextCombineHorizontal: Property.TextCombineUpright;
    msTextOverflow: Property.TextOverflow;
    msTouchAction: Property.TouchAction;
    msTouchSelect: Property.MsTouchSelect;
    msTransform: Property.Transform;
    msTransformOrigin: Property.TransformOrigin<string | number>;
    msTransitionDelay: Property.TransitionDelay<string & {}>;
    msTransitionDuration: Property.TransitionDuration<string & {}>;
    msTransitionProperty: Property.TransitionProperty;
    msTransitionTimingFunction: Property.TransitionTimingFunction;
    msUserSelect: Property.MsUserSelect;
    msWordBreak: Property.WordBreak;
    msWrapFlow: Property.MsWrapFlow;
    msWrapMargin: Property.MsWrapMargin<string | number>;
    msWrapThrough: Property.MsWrapThrough;
    msWritingMode: Property.WritingMode;
    WebkitAlignContent: Property.AlignContent;
    WebkitAlignItems: Property.AlignItems;
    WebkitAlignSelf: Property.AlignSelf;
    WebkitAnimationDelay: Property.AnimationDelay<string & {}>;
    WebkitAnimationDirection: Property.AnimationDirection;
    WebkitAnimationDuration: Property.AnimationDuration<string & {}>;
    WebkitAnimationFillMode: Property.AnimationFillMode;
    WebkitAnimationIterationCount: Property.AnimationIterationCount;
    WebkitAnimationName: Property.AnimationName;
    WebkitAnimationPlayState: Property.AnimationPlayState;
    WebkitAnimationTimingFunction: Property.AnimationTimingFunction;
    WebkitAppearance: Property.WebkitAppearance;
    WebkitBackdropFilter: Property.BackdropFilter;
    WebkitBackfaceVisibility: Property.BackfaceVisibility;
    WebkitBackgroundClip: Property.BackgroundClip;
    WebkitBackgroundOrigin: Property.BackgroundOrigin;
    WebkitBackgroundSize: Property.BackgroundSize<string | number>;
    WebkitBorderBeforeColor: Property.WebkitBorderBeforeColor;
    WebkitBorderBeforeStyle: Property.WebkitBorderBeforeStyle;
    WebkitBorderBeforeWidth: Property.WebkitBorderBeforeWidth<string | number>;
    WebkitBorderBottomLeftRadius: Property.BorderBottomLeftRadius<string | number>;
    WebkitBorderBottomRightRadius: Property.BorderBottomRightRadius<string | number>;
    WebkitBorderImageSlice: Property.BorderImageSlice;
    WebkitBorderTopLeftRadius: Property.BorderTopLeftRadius<string | number>;
    WebkitBorderTopRightRadius: Property.BorderTopRightRadius<string | number>;
    WebkitBoxDecorationBreak: Property.BoxDecorationBreak;
    WebkitBoxReflect: Property.WebkitBoxReflect<string | number>;
    WebkitBoxShadow: Property.BoxShadow;
    WebkitBoxSizing: Property.BoxSizing;
    WebkitClipPath: Property.ClipPath;
    WebkitColumnCount: Property.ColumnCount;
    WebkitColumnFill: Property.ColumnFill;
    WebkitColumnRuleColor: Property.ColumnRuleColor;
    WebkitColumnRuleStyle: Property.ColumnRuleStyle;
    WebkitColumnRuleWidth: Property.ColumnRuleWidth<string | number>;
    WebkitColumnSpan: Property.ColumnSpan;
    WebkitColumnWidth: Property.ColumnWidth<string | number>;
    WebkitFilter: Property.Filter;
    WebkitFlexBasis: Property.FlexBasis<string | number>;
    WebkitFlexDirection: Property.FlexDirection;
    WebkitFlexGrow: Property.FlexGrow;
    WebkitFlexShrink: Property.FlexShrink;
    WebkitFlexWrap: Property.FlexWrap;
    WebkitFontFeatureSettings: Property.FontFeatureSettings;
    WebkitFontKerning: Property.FontKerning;
    WebkitFontSmoothing: Property.FontSmooth<string | number>;
    WebkitFontVariantLigatures: Property.FontVariantLigatures;
    WebkitHyphenateCharacter: Property.HyphenateCharacter;
    WebkitHyphens: Property.Hyphens;
    WebkitInitialLetter: Property.InitialLetter;
    WebkitJustifyContent: Property.JustifyContent;
    WebkitLineBreak: Property.LineBreak;
    WebkitLineClamp: Property.WebkitLineClamp;
    WebkitMarginEnd: Property.MarginInlineEnd<string | number>;
    WebkitMarginStart: Property.MarginInlineStart<string | number>;
    WebkitMaskAttachment: Property.WebkitMaskAttachment;
    WebkitMaskBoxImageOutset: Property.MaskBorderOutset<string | number>;
    WebkitMaskBoxImageRepeat: Property.MaskBorderRepeat;
    WebkitMaskBoxImageSlice: Property.MaskBorderSlice;
    WebkitMaskBoxImageSource: Property.MaskBorderSource;
    WebkitMaskBoxImageWidth: Property.MaskBorderWidth<string | number>;
    WebkitMaskClip: Property.WebkitMaskClip;
    WebkitMaskComposite: Property.WebkitMaskComposite;
    WebkitMaskImage: Property.WebkitMaskImage;
    WebkitMaskOrigin: Property.WebkitMaskOrigin;
    WebkitMaskPosition: Property.WebkitMaskPosition<string | number>;
    WebkitMaskPositionX: Property.WebkitMaskPositionX<string | number>;
    WebkitMaskPositionY: Property.WebkitMaskPositionY<string | number>;
    WebkitMaskRepeat: Property.WebkitMaskRepeat;
    WebkitMaskRepeatX: Property.WebkitMaskRepeatX;
    WebkitMaskRepeatY: Property.WebkitMaskRepeatY;
    WebkitMaskSize: Property.WebkitMaskSize<string | number>;
    WebkitMaxInlineSize: Property.MaxInlineSize<string | number>;
    WebkitOrder: Property.Order;
    WebkitOverflowScrolling: Property.WebkitOverflowScrolling;
    WebkitPaddingEnd: Property.PaddingInlineEnd<string | number>;
    WebkitPaddingStart: Property.PaddingInlineStart<string | number>;
    WebkitPerspective: Property.Perspective<string | number>;
    WebkitPerspectiveOrigin: Property.PerspectiveOrigin<string | number>;
    WebkitPrintColorAdjust: Property.PrintColorAdjust;
    WebkitRubyPosition: Property.RubyPosition;
    WebkitScrollSnapType: Property.ScrollSnapType;
    WebkitShapeMargin: Property.ShapeMargin<string | number>;
    WebkitTapHighlightColor: Property.WebkitTapHighlightColor;
    WebkitTextCombine: Property.TextCombineUpright;
    WebkitTextDecorationColor: Property.TextDecorationColor;
    WebkitTextDecorationLine: Property.TextDecorationLine;
    WebkitTextDecorationSkip: Property.TextDecorationSkip;
    WebkitTextDecorationStyle: Property.TextDecorationStyle;
    WebkitTextEmphasisColor: Property.TextEmphasisColor;
    WebkitTextEmphasisPosition: Property.TextEmphasisPosition;
    WebkitTextEmphasisStyle: Property.TextEmphasisStyle;
    WebkitTextFillColor: Property.WebkitTextFillColor;
    WebkitTextOrientation: Property.TextOrientation;
    WebkitTextSizeAdjust: Property.TextSizeAdjust;
    WebkitTextStrokeColor: Property.WebkitTextStrokeColor;
    WebkitTextStrokeWidth: Property.WebkitTextStrokeWidth<string | number>;
    WebkitTextUnderlinePosition: Property.TextUnderlinePosition;
    WebkitTouchCallout: Property.WebkitTouchCallout;
    WebkitTransform: Property.Transform;
    WebkitTransformOrigin: Property.TransformOrigin<string | number>;
    WebkitTransformStyle: Property.TransformStyle;
    WebkitTransitionDelay: Property.TransitionDelay<string & {}>;
    WebkitTransitionDuration: Property.TransitionDuration<string & {}>;
    WebkitTransitionProperty: Property.TransitionProperty;
    WebkitTransitionTimingFunction: Property.TransitionTimingFunction;
    WebkitUserModify: Property.WebkitUserModify;
    WebkitUserSelect: Property.UserSelect;
    WebkitWritingMode: Property.WritingMode;
    MozAnimation: Property.Animation<string & {}>;
    MozBorderImage: Property.BorderImage;
    MozColumnRule: Property.ColumnRule<string | number>;
    MozColumns: Property.Columns<string | number>;
    MozTransition: Property.Transition<string & {}>;
    msContentZoomLimit: Property.MsContentZoomLimit;
    msContentZoomSnap: Property.MsContentZoomSnap;
    msFlex: Property.Flex<string | number>;
    msScrollLimit: Property.MsScrollLimit;
    msScrollSnapX: Property.MsScrollSnapX;
    msScrollSnapY: Property.MsScrollSnapY;
    msTransition: Property.Transition<string & {}>;
    WebkitAnimation: Property.Animation<string & {}>;
    WebkitBorderBefore: Property.WebkitBorderBefore<string | number>;
    WebkitBorderImage: Property.BorderImage;
    WebkitBorderRadius: Property.BorderRadius<string | number>;
    WebkitColumnRule: Property.ColumnRule<string | number>;
    WebkitColumns: Property.Columns<string | number>;
    WebkitFlex: Property.Flex<string | number>;
    WebkitFlexFlow: Property.FlexFlow;
    WebkitMask: Property.WebkitMask<string | number>;
    WebkitMaskBoxImage: Property.MaskBorder;
    WebkitTextEmphasis: Property.TextEmphasis;
    WebkitTextStroke: Property.WebkitTextStroke<string | number>;
    WebkitTransition: Property.Transition<string & {}>;
    azimuth: Property.Azimuth;
    boxAlign: Property.BoxAlign;
    boxDirection: Property.BoxDirection;
    boxFlex: Property.BoxFlex;
    boxFlexGroup: Property.BoxFlexGroup;
    boxLines: Property.BoxLines;
    boxOrdinalGroup: Property.BoxOrdinalGroup;
    boxOrient: Property.BoxOrient;
    boxPack: Property.BoxPack;
    clip: Property.Clip;
    gridColumnGap: Property.GridColumnGap<string | number>;
    gridGap: Property.GridGap<string | number>;
    gridRowGap: Property.GridRowGap<string | number>;
    imeMode: Property.ImeMode;
    offsetBlock: Property.InsetBlock<string | number>;
    offsetBlockEnd: Property.InsetBlockEnd<string | number>;
    offsetBlockStart: Property.InsetBlockStart<string | number>;
    offsetInline: Property.InsetInline<string | number>;
    offsetInlineEnd: Property.InsetInlineEnd<string | number>;
    offsetInlineStart: Property.InsetInlineStart<string | number>;
    scrollSnapCoordinate: Property.ScrollSnapCoordinate<string | number>;
    scrollSnapDestination: Property.ScrollSnapDestination<string | number>;
    scrollSnapPointsX: Property.ScrollSnapPointsX;
    scrollSnapPointsY: Property.ScrollSnapPointsY;
    scrollSnapTypeX: Property.ScrollSnapTypeX;
    scrollSnapTypeY: Property.ScrollSnapTypeY;
    KhtmlBoxAlign: Property.BoxAlign;
    KhtmlBoxDirection: Property.BoxDirection;
    KhtmlBoxFlex: Property.BoxFlex;
    KhtmlBoxFlexGroup: Property.BoxFlexGroup;
    KhtmlBoxLines: Property.BoxLines;
    KhtmlBoxOrdinalGroup: Property.BoxOrdinalGroup;
    KhtmlBoxOrient: Property.BoxOrient;
    KhtmlBoxPack: Property.BoxPack;
    KhtmlLineBreak: Property.LineBreak;
    KhtmlOpacity: Property.Opacity;
    KhtmlUserSelect: Property.UserSelect;
    MozBackgroundClip: Property.BackgroundClip;
    MozBackgroundInlinePolicy: Property.BoxDecorationBreak;
    MozBackgroundOrigin: Property.BackgroundOrigin;
    MozBackgroundSize: Property.BackgroundSize<string | number>;
    MozBorderRadius: Property.BorderRadius<string | number>;
    MozBorderRadiusBottomleft: Property.BorderBottomLeftRadius<string | number>;
    MozBorderRadiusBottomright: Property.BorderBottomRightRadius<string | number>;
    MozBorderRadiusTopleft: Property.BorderTopLeftRadius<string | number>;
    MozBorderRadiusTopright: Property.BorderTopRightRadius<string | number>;
    MozBoxAlign: Property.BoxAlign;
    MozBoxDirection: Property.BoxDirection;
    MozBoxFlex: Property.BoxFlex;
    MozBoxOrdinalGroup: Property.BoxOrdinalGroup;
    MozBoxOrient: Property.BoxOrient;
    MozBoxPack: Property.BoxPack;
    MozBoxShadow: Property.BoxShadow;
    MozFloatEdge: Property.MozFloatEdge;
    MozForceBrokenImageIcon: Property.MozForceBrokenImageIcon;
    MozOpacity: Property.Opacity;
    MozOutline: Property.Outline<string | number>;
    MozOutlineColor: Property.OutlineColor;
    MozOutlineRadius: Property.MozOutlineRadius<string | number>;
    MozOutlineRadiusBottomleft: Property.MozOutlineRadiusBottomleft<string | number>;
    MozOutlineRadiusBottomright: Property.MozOutlineRadiusBottomright<string | number>;
    MozOutlineRadiusTopleft: Property.MozOutlineRadiusTopleft<string | number>;
    MozOutlineRadiusTopright: Property.MozOutlineRadiusTopright<string | number>;
    MozOutlineStyle: Property.OutlineStyle;
    MozOutlineWidth: Property.OutlineWidth<string | number>;
    MozTextAlignLast: Property.TextAlignLast;
    MozTextDecorationColor: Property.TextDecorationColor;
    MozTextDecorationLine: Property.TextDecorationLine;
    MozTextDecorationStyle: Property.TextDecorationStyle;
    MozUserInput: Property.MozUserInput;
    msImeMode: Property.ImeMode;
    OAnimation: Property.Animation<string & {}>;
    OAnimationDelay: Property.AnimationDelay<string & {}>;
    OAnimationDirection: Property.AnimationDirection;
    OAnimationDuration: Property.AnimationDuration<string & {}>;
    OAnimationFillMode: Property.AnimationFillMode;
    OAnimationIterationCount: Property.AnimationIterationCount;
    OAnimationName: Property.AnimationName;
    OAnimationPlayState: Property.AnimationPlayState;
    OAnimationTimingFunction: Property.AnimationTimingFunction;
    OBackgroundSize: Property.BackgroundSize<string | number>;
    OBorderImage: Property.BorderImage;
    OObjectFit: Property.ObjectFit;
    OObjectPosition: Property.ObjectPosition<string | number>;
    OTabSize: Property.TabSize<string | number>;
    OTextOverflow: Property.TextOverflow;
    OTransform: Property.Transform;
    OTransformOrigin: Property.TransformOrigin<string | number>;
    OTransition: Property.Transition<string & {}>;
    OTransitionDelay: Property.TransitionDelay<string & {}>;
    OTransitionDuration: Property.TransitionDuration<string & {}>;
    OTransitionProperty: Property.TransitionProperty;
    OTransitionTimingFunction: Property.TransitionTimingFunction;
    WebkitBoxAlign: Property.BoxAlign;
    WebkitBoxDirection: Property.BoxDirection;
    WebkitBoxFlex: Property.BoxFlex;
    WebkitBoxFlexGroup: Property.BoxFlexGroup;
    WebkitBoxLines: Property.BoxLines;
    WebkitBoxOrdinalGroup: Property.BoxOrdinalGroup;
    WebkitBoxOrient: Property.BoxOrient;
    WebkitBoxPack: Property.BoxPack;
    WebkitScrollSnapPointsX: Property.ScrollSnapPointsX;
    WebkitScrollSnapPointsY: Property.ScrollSnapPointsY;
    alignmentBaseline: Property.AlignmentBaseline;
    baselineShift: Property.BaselineShift<string | number>;
    clipRule: Property.ClipRule;
    colorInterpolation: Property.ColorInterpolation;
    colorRendering: Property.ColorRendering;
    dominantBaseline: Property.DominantBaseline;
    fill: Property.Fill;
    fillOpacity: Property.FillOpacity;
    fillRule: Property.FillRule;
    floodColor: Property.FloodColor;
    floodOpacity: Property.FloodOpacity;
    glyphOrientationVertical: Property.GlyphOrientationVertical;
    lightingColor: Property.LightingColor;
    marker: Property.Marker;
    markerEnd: Property.MarkerEnd;
    markerMid: Property.MarkerMid;
    markerStart: Property.MarkerStart;
    shapeRendering: Property.ShapeRendering;
    stopColor: Property.StopColor;
    stopOpacity: Property.StopOpacity;
    stroke: Property.Stroke;
    strokeDasharray: Property.StrokeDasharray<string | number>;
    strokeDashoffset: Property.StrokeDashoffset<string | number>;
    strokeLinecap: Property.StrokeLinecap;
    strokeLinejoin: Property.StrokeLinejoin;
    strokeMiterlimit: Property.StrokeMiterlimit;
    strokeOpacity: Property.StrokeOpacity;
    strokeWidth: Property.StrokeWidth<string | number>;
    textAnchor: Property.TextAnchor;
    vectorEffect: Property.VectorEffect;
}
declare const allCssRulesObject: AllCssRules;

interface SizingsInterface {
    xl: string;
    l: string;
    m: string;
    s: string;
    xs: string;
}
interface DefaulColorsInterface {
    primary: string;
    secondary: string;
    text: string;
    background: string;
    shadows: string;
}
interface DefaultSpacingsInterface {
    paddings: SizingsInterface;
    margins: SizingsInterface;
    gaps: SizingsInterface;
}
type OveridesType = Partial<Record<keyof Omit<typeof UI, "FlexColumn" | "FlexRow">, Partial<typeof allCssRulesObject>>>;
interface UIThemeInterface<TColors = Partial<DefaulColorsInterface>, TSpacings = Partial<DefaultSpacingsInterface>> {
    variations: Record<keyof TColors, string>[];
    spacings: TSpacings;
    overrides?: OveridesType;
}
declare const createUITheme: <TSpacings = Partial<DefaultSpacingsInterface>, TColorSchema = Partial<DefaulColorsInterface>>(spacings: TSpacings, variations: TColorSchema[], overrides?: OveridesType) => {
    spacings: TSpacings;
    variations: TColorSchema[];
    overrides?: Partial<Record<"Menu" | "Element" | "Body" | "Link" | "A" | "Text" | "P" | "H1" | "H2" | "H3" | "H4" | "H5" | "Article" | "Span" | "B" | "I" | "Address" | "Code" | "Button" | "Br" | "Marker" | "Main" | "Header" | "Footer" | "Section" | "Aside" | "Form" | "MenuItem" | "Select" | "Option" | "OptionGroup" | "Input" | "TextArea" | "Image" | "Img" | "Video" | "IFrame" | "Flex" | "Grid", Partial<{
        accentColor: csstype.Property.AccentColor;
        alignContent: csstype.Property.AlignContent;
        alignItems: csstype.Property.AlignItems;
        alignSelf: csstype.Property.AlignSelf;
        alignTracks: csstype.Property.AlignTracks;
        animationComposition: csstype.Property.AnimationComposition;
        animationDelay: csstype.Property.AnimationDelay<string & {}>;
        animationDirection: csstype.Property.AnimationDirection;
        animationDuration: csstype.Property.AnimationDuration<string & {}>;
        animationFillMode: csstype.Property.AnimationFillMode;
        animationIterationCount: csstype.Property.AnimationIterationCount;
        animationName: csstype.Property.AnimationName;
        animationPlayState: csstype.Property.AnimationPlayState;
        animationTimeline: csstype.Property.AnimationTimeline;
        animationTimingFunction: csstype.Property.AnimationTimingFunction;
        appearance: csstype.Property.Appearance;
        aspectRatio: csstype.Property.AspectRatio;
        backdropFilter: csstype.Property.BackdropFilter;
        backfaceVisibility: csstype.Property.BackfaceVisibility;
        backgroundAttachment: csstype.Property.BackgroundAttachment;
        backgroundBlendMode: csstype.Property.BackgroundBlendMode;
        backgroundClip: csstype.Property.BackgroundClip;
        backgroundColor: csstype.Property.BackgroundColor;
        backgroundImage: csstype.Property.BackgroundImage;
        backgroundOrigin: csstype.Property.BackgroundOrigin;
        backgroundPositionX: csstype.Property.BackgroundPositionX<string | number>;
        backgroundPositionY: csstype.Property.BackgroundPositionY<string | number>;
        backgroundRepeat: csstype.Property.BackgroundRepeat;
        backgroundSize: csstype.Property.BackgroundSize<string | number>;
        blockOverflow: csstype.Property.BlockOverflow;
        blockSize: csstype.Property.BlockSize<string | number>;
        borderBlockColor: csstype.Property.BorderBlockColor;
        borderBlockEndColor: csstype.Property.BorderBlockEndColor;
        borderBlockEndStyle: csstype.Property.BorderBlockEndStyle;
        borderBlockEndWidth: csstype.Property.BorderBlockEndWidth<string | number>;
        borderBlockStartColor: csstype.Property.BorderBlockStartColor;
        borderBlockStartStyle: csstype.Property.BorderBlockStartStyle;
        borderBlockStartWidth: csstype.Property.BorderBlockStartWidth<string | number>;
        borderBlockStyle: csstype.Property.BorderBlockStyle;
        borderBlockWidth: csstype.Property.BorderBlockWidth<string | number>;
        borderBottomColor: csstype.Property.BorderBottomColor;
        borderBottomLeftRadius: csstype.Property.BorderBottomLeftRadius<string | number>;
        borderBottomRightRadius: csstype.Property.BorderBottomRightRadius<string | number>;
        borderBottomStyle: csstype.Property.BorderBottomStyle;
        borderBottomWidth: csstype.Property.BorderBottomWidth<string | number>;
        borderCollapse: csstype.Property.BorderCollapse;
        borderEndEndRadius: csstype.Property.BorderEndEndRadius<string | number>;
        borderEndStartRadius: csstype.Property.BorderEndStartRadius<string | number>;
        borderImageOutset: csstype.Property.BorderImageOutset<string | number>;
        borderImageRepeat: csstype.Property.BorderImageRepeat;
        borderImageSlice: csstype.Property.BorderImageSlice;
        borderImageSource: csstype.Property.BorderImageSource;
        borderImageWidth: csstype.Property.BorderImageWidth<string | number>;
        borderInlineColor: csstype.Property.BorderInlineColor;
        borderInlineEndColor: csstype.Property.BorderInlineEndColor;
        borderInlineEndStyle: csstype.Property.BorderInlineEndStyle;
        borderInlineEndWidth: csstype.Property.BorderInlineEndWidth<string | number>;
        borderInlineStartColor: csstype.Property.BorderInlineStartColor;
        borderInlineStartStyle: csstype.Property.BorderInlineStartStyle;
        borderInlineStartWidth: csstype.Property.BorderInlineStartWidth<string | number>;
        borderInlineStyle: csstype.Property.BorderInlineStyle;
        borderInlineWidth: csstype.Property.BorderInlineWidth<string | number>;
        borderLeftColor: csstype.Property.BorderLeftColor;
        borderLeftStyle: csstype.Property.BorderLeftStyle;
        borderLeftWidth: csstype.Property.BorderLeftWidth<string | number>;
        borderRightColor: csstype.Property.BorderRightColor;
        borderRightStyle: csstype.Property.BorderRightStyle;
        borderRightWidth: csstype.Property.BorderRightWidth<string | number>;
        borderSpacing: csstype.Property.BorderSpacing<string | number>;
        borderStartEndRadius: csstype.Property.BorderStartEndRadius<string | number>;
        borderStartStartRadius: csstype.Property.BorderStartStartRadius<string | number>;
        borderTopColor: csstype.Property.BorderTopColor;
        borderTopLeftRadius: csstype.Property.BorderTopLeftRadius<string | number>;
        borderTopRightRadius: csstype.Property.BorderTopRightRadius<string | number>;
        borderTopStyle: csstype.Property.BorderTopStyle;
        borderTopWidth: csstype.Property.BorderTopWidth<string | number>;
        bottom: csstype.Property.Bottom<string | number>;
        boxDecorationBreak: csstype.Property.BoxDecorationBreak;
        boxShadow: csstype.Property.BoxShadow;
        boxSizing: csstype.Property.BoxSizing;
        breakAfter: csstype.Property.BreakAfter;
        breakBefore: csstype.Property.BreakBefore;
        breakInside: csstype.Property.BreakInside;
        captionSide: csstype.Property.CaptionSide;
        caretColor: csstype.Property.CaretColor;
        caretShape: csstype.Property.CaretShape;
        clear: csstype.Property.Clear;
        clipPath: csstype.Property.ClipPath;
        color: csstype.Property.Color;
        colorAdjust: csstype.Property.PrintColorAdjust;
        colorScheme: csstype.Property.ColorScheme;
        columnCount: csstype.Property.ColumnCount;
        columnFill: csstype.Property.ColumnFill;
        columnGap: csstype.Property.ColumnGap<string | number>;
        columnRuleColor: csstype.Property.ColumnRuleColor;
        columnRuleStyle: csstype.Property.ColumnRuleStyle;
        columnRuleWidth: csstype.Property.ColumnRuleWidth<string | number>;
        columnSpan: csstype.Property.ColumnSpan;
        columnWidth: csstype.Property.ColumnWidth<string | number>;
        contain: csstype.Property.Contain;
        containIntrinsicBlockSize: csstype.Property.ContainIntrinsicBlockSize<string | number>;
        containIntrinsicHeight: csstype.Property.ContainIntrinsicHeight<string | number>;
        containIntrinsicInlineSize: csstype.Property.ContainIntrinsicInlineSize<string | number>;
        containIntrinsicWidth: csstype.Property.ContainIntrinsicWidth<string | number>;
        containerName: csstype.Property.ContainerName;
        containerType: csstype.Property.ContainerType;
        content: csstype.Property.Content;
        contentVisibility: csstype.Property.ContentVisibility;
        counterIncrement: csstype.Property.CounterIncrement;
        counterReset: csstype.Property.CounterReset;
        counterSet: csstype.Property.CounterSet;
        cursor: csstype.Property.Cursor;
        direction: csstype.Property.Direction;
        display: csstype.Property.Display;
        emptyCells: csstype.Property.EmptyCells;
        filter: csstype.Property.Filter;
        flexBasis: csstype.Property.FlexBasis<string | number>;
        flexDirection: csstype.Property.FlexDirection;
        flexGrow: csstype.Property.FlexGrow;
        flexShrink: csstype.Property.FlexShrink;
        flexWrap: csstype.Property.FlexWrap;
        float: csstype.Property.Float;
        fontFamily: csstype.Property.FontFamily;
        fontFeatureSettings: csstype.Property.FontFeatureSettings;
        fontKerning: csstype.Property.FontKerning;
        fontLanguageOverride: csstype.Property.FontLanguageOverride;
        fontOpticalSizing: csstype.Property.FontOpticalSizing;
        fontPalette: csstype.Property.FontPalette;
        fontSize: csstype.Property.FontSize<string | number>;
        fontSizeAdjust: csstype.Property.FontSizeAdjust;
        fontSmooth: csstype.Property.FontSmooth<string | number>;
        fontStretch: csstype.Property.FontStretch;
        fontStyle: csstype.Property.FontStyle;
        fontSynthesis: csstype.Property.FontSynthesis;
        fontVariant: csstype.Property.FontVariant;
        fontVariantAlternates: csstype.Property.FontVariantAlternates;
        fontVariantCaps: csstype.Property.FontVariantCaps;
        fontVariantEastAsian: csstype.Property.FontVariantEastAsian;
        fontVariantEmoji: csstype.Property.FontVariantEmoji;
        fontVariantLigatures: csstype.Property.FontVariantLigatures;
        fontVariantNumeric: csstype.Property.FontVariantNumeric;
        fontVariantPosition: csstype.Property.FontVariantPosition;
        fontVariationSettings: csstype.Property.FontVariationSettings;
        fontWeight: csstype.Property.FontWeight;
        forcedColorAdjust: csstype.Property.ForcedColorAdjust;
        gridAutoColumns: csstype.Property.GridAutoColumns<string | number>;
        gridAutoFlow: csstype.Property.GridAutoFlow;
        gridAutoRows: csstype.Property.GridAutoRows<string | number>;
        gridColumnEnd: csstype.Property.GridColumnEnd;
        gridColumnStart: csstype.Property.GridColumnStart;
        gridRowEnd: csstype.Property.GridRowEnd;
        gridRowStart: csstype.Property.GridRowStart;
        gridTemplateAreas: csstype.Property.GridTemplateAreas;
        gridTemplateColumns: csstype.Property.GridTemplateColumns<string | number>;
        gridTemplateRows: csstype.Property.GridTemplateRows<string | number>;
        hangingPunctuation: csstype.Property.HangingPunctuation;
        height: csstype.Property.Height<string | number>;
        hyphenateCharacter: csstype.Property.HyphenateCharacter;
        hyphenateLimitChars: csstype.Property.HyphenateLimitChars;
        hyphens: csstype.Property.Hyphens;
        imageOrientation: csstype.Property.ImageOrientation;
        imageRendering: csstype.Property.ImageRendering;
        imageResolution: csstype.Property.ImageResolution;
        initialLetter: csstype.Property.InitialLetter;
        inlineSize: csstype.Property.InlineSize<string | number>;
        inputSecurity: csstype.Property.InputSecurity;
        insetBlockEnd: csstype.Property.InsetBlockEnd<string | number>;
        insetBlockStart: csstype.Property.InsetBlockStart<string | number>;
        insetInlineEnd: csstype.Property.InsetInlineEnd<string | number>;
        insetInlineStart: csstype.Property.InsetInlineStart<string | number>;
        isolation: csstype.Property.Isolation;
        justifyContent: csstype.Property.JustifyContent;
        justifyItems: csstype.Property.JustifyItems;
        justifySelf: csstype.Property.JustifySelf;
        justifyTracks: csstype.Property.JustifyTracks;
        left: csstype.Property.Left<string | number>;
        letterSpacing: csstype.Property.LetterSpacing<string | number>;
        lineBreak: csstype.Property.LineBreak;
        lineHeight: csstype.Property.LineHeight<string | number>;
        lineHeightStep: csstype.Property.LineHeightStep<string | number>;
        listStyleImage: csstype.Property.ListStyleImage;
        listStylePosition: csstype.Property.ListStylePosition;
        listStyleType: csstype.Property.ListStyleType;
        marginBlockEnd: csstype.Property.MarginBlockEnd<string | number>;
        marginBlockStart: csstype.Property.MarginBlockStart<string | number>;
        marginBottom: csstype.Property.MarginBottom<string | number>;
        marginInlineEnd: csstype.Property.MarginInlineEnd<string | number>;
        marginInlineStart: csstype.Property.MarginInlineStart<string | number>;
        marginLeft: csstype.Property.MarginLeft<string | number>;
        marginRight: csstype.Property.MarginRight<string | number>;
        marginTop: csstype.Property.MarginTop<string | number>;
        marginTrim: csstype.Property.MarginTrim;
        maskBorderMode: csstype.Property.MaskBorderMode;
        maskBorderOutset: csstype.Property.MaskBorderOutset<string | number>;
        maskBorderRepeat: csstype.Property.MaskBorderRepeat;
        maskBorderSlice: csstype.Property.MaskBorderSlice;
        maskBorderSource: csstype.Property.MaskBorderSource;
        maskBorderWidth: csstype.Property.MaskBorderWidth<string | number>;
        maskClip: csstype.Property.MaskClip;
        maskComposite: csstype.Property.MaskComposite;
        maskImage: csstype.Property.MaskImage;
        maskMode: csstype.Property.MaskMode;
        maskOrigin: csstype.Property.MaskOrigin;
        maskPosition: csstype.Property.MaskPosition<string | number>;
        maskRepeat: csstype.Property.MaskRepeat;
        maskSize: csstype.Property.MaskSize<string | number>;
        maskType: csstype.Property.MaskType;
        mathDepth: csstype.Property.MathDepth;
        mathShift: csstype.Property.MathShift;
        mathStyle: csstype.Property.MathStyle;
        maxBlockSize: csstype.Property.MaxBlockSize<string | number>;
        maxHeight: csstype.Property.MaxHeight<string | number>;
        maxInlineSize: csstype.Property.MaxInlineSize<string | number>;
        maxLines: csstype.Property.MaxLines;
        maxWidth: csstype.Property.MaxWidth<string | number>;
        minBlockSize: csstype.Property.MinBlockSize<string | number>;
        minHeight: csstype.Property.MinHeight<string | number>;
        minInlineSize: csstype.Property.MinInlineSize<string | number>;
        minWidth: csstype.Property.MinWidth<string | number>;
        mixBlendMode: csstype.Property.MixBlendMode;
        motionDistance: csstype.Property.OffsetDistance<string | number>;
        motionPath: csstype.Property.OffsetPath;
        motionRotation: csstype.Property.OffsetRotate;
        objectFit: csstype.Property.ObjectFit;
        objectPosition: csstype.Property.ObjectPosition<string | number>;
        offsetAnchor: csstype.Property.OffsetAnchor<string | number>;
        offsetDistance: csstype.Property.OffsetDistance<string | number>;
        offsetPath: csstype.Property.OffsetPath;
        offsetPosition: csstype.Property.OffsetPosition<string | number>;
        offsetRotate: csstype.Property.OffsetRotate;
        offsetRotation: csstype.Property.OffsetRotate;
        opacity: csstype.Property.Opacity;
        order: csstype.Property.Order;
        orphans: csstype.Property.Orphans;
        outlineColor: csstype.Property.OutlineColor;
        outlineOffset: csstype.Property.OutlineOffset<string | number>;
        outlineStyle: csstype.Property.OutlineStyle;
        outlineWidth: csstype.Property.OutlineWidth<string | number>;
        overflowAnchor: csstype.Property.OverflowAnchor;
        overflowBlock: csstype.Property.OverflowBlock;
        overflowClipBox: csstype.Property.OverflowClipBox;
        overflowClipMargin: csstype.Property.OverflowClipMargin<string | number>;
        overflowInline: csstype.Property.OverflowInline;
        overflowWrap: csstype.Property.OverflowWrap;
        overflowX: csstype.Property.OverflowX;
        overflowY: csstype.Property.OverflowY;
        overscrollBehaviorBlock: csstype.Property.OverscrollBehaviorBlock;
        overscrollBehaviorInline: csstype.Property.OverscrollBehaviorInline;
        overscrollBehaviorX: csstype.Property.OverscrollBehaviorX;
        overscrollBehaviorY: csstype.Property.OverscrollBehaviorY;
        paddingBlockEnd: csstype.Property.PaddingBlockEnd<string | number>;
        paddingBlockStart: csstype.Property.PaddingBlockStart<string | number>;
        paddingBottom: csstype.Property.PaddingBottom<string | number>;
        paddingInlineEnd: csstype.Property.PaddingInlineEnd<string | number>;
        paddingInlineStart: csstype.Property.PaddingInlineStart<string | number>;
        paddingLeft: csstype.Property.PaddingLeft<string | number>;
        paddingRight: csstype.Property.PaddingRight<string | number>;
        paddingTop: csstype.Property.PaddingTop<string | number>;
        page: csstype.Property.Page;
        pageBreakAfter: csstype.Property.PageBreakAfter;
        pageBreakBefore: csstype.Property.PageBreakBefore;
        pageBreakInside: csstype.Property.PageBreakInside;
        paintOrder: csstype.Property.PaintOrder;
        perspective: csstype.Property.Perspective<string | number>;
        perspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number>;
        pointerEvents: csstype.Property.PointerEvents;
        position: csstype.Property.Position;
        printColorAdjust: csstype.Property.PrintColorAdjust;
        quotes: csstype.Property.Quotes;
        resize: csstype.Property.Resize;
        right: csstype.Property.Right<string | number>;
        rotate: csstype.Property.Rotate;
        rowGap: csstype.Property.RowGap<string | number>;
        rubyAlign: csstype.Property.RubyAlign;
        rubyMerge: csstype.Property.RubyMerge;
        rubyPosition: csstype.Property.RubyPosition;
        scale: csstype.Property.Scale;
        scrollBehavior: csstype.Property.ScrollBehavior;
        scrollMarginBlockEnd: csstype.Property.ScrollMarginBlockEnd<string | number>;
        scrollMarginBlockStart: csstype.Property.ScrollMarginBlockStart<string | number>;
        scrollMarginBottom: csstype.Property.ScrollMarginBottom<string | number>;
        scrollMarginInlineEnd: csstype.Property.ScrollMarginInlineEnd<string | number>;
        scrollMarginInlineStart: csstype.Property.ScrollMarginInlineStart<string | number>;
        scrollMarginLeft: csstype.Property.ScrollMarginLeft<string | number>;
        scrollMarginRight: csstype.Property.ScrollMarginRight<string | number>;
        scrollMarginTop: csstype.Property.ScrollMarginTop<string | number>;
        scrollPaddingBlockEnd: csstype.Property.ScrollPaddingBlockEnd<string | number>;
        scrollPaddingBlockStart: csstype.Property.ScrollPaddingBlockStart<string | number>;
        scrollPaddingBottom: csstype.Property.ScrollPaddingBottom<string | number>;
        scrollPaddingInlineEnd: csstype.Property.ScrollPaddingInlineEnd<string | number>;
        scrollPaddingInlineStart: csstype.Property.ScrollPaddingInlineStart<string | number>;
        scrollPaddingLeft: csstype.Property.ScrollPaddingLeft<string | number>;
        scrollPaddingRight: csstype.Property.ScrollPaddingRight<string | number>;
        scrollPaddingTop: csstype.Property.ScrollPaddingTop<string | number>;
        scrollSnapAlign: csstype.Property.ScrollSnapAlign;
        scrollSnapMarginBottom: csstype.Property.ScrollMarginBottom<string | number>;
        scrollSnapMarginLeft: csstype.Property.ScrollMarginLeft<string | number>;
        scrollSnapMarginRight: csstype.Property.ScrollMarginRight<string | number>;
        scrollSnapMarginTop: csstype.Property.ScrollMarginTop<string | number>;
        scrollSnapStop: csstype.Property.ScrollSnapStop;
        scrollSnapType: csstype.Property.ScrollSnapType;
        scrollTimelineAxis: csstype.Property.ScrollTimelineAxis;
        scrollTimelineName: csstype.Property.ScrollTimelineName;
        scrollbarColor: csstype.Property.ScrollbarColor;
        scrollbarGutter: csstype.Property.ScrollbarGutter;
        scrollbarWidth: csstype.Property.ScrollbarWidth;
        shapeImageThreshold: csstype.Property.ShapeImageThreshold;
        shapeMargin: csstype.Property.ShapeMargin<string | number>;
        shapeOutside: csstype.Property.ShapeOutside;
        tabSize: csstype.Property.TabSize<string | number>;
        tableLayout: csstype.Property.TableLayout;
        textAlign: csstype.Property.TextAlign;
        textAlignLast: csstype.Property.TextAlignLast;
        textCombineUpright: csstype.Property.TextCombineUpright;
        textDecorationColor: csstype.Property.TextDecorationColor;
        textDecorationLine: csstype.Property.TextDecorationLine;
        textDecorationSkip: csstype.Property.TextDecorationSkip;
        textDecorationSkipInk: csstype.Property.TextDecorationSkipInk;
        textDecorationStyle: csstype.Property.TextDecorationStyle;
        textDecorationThickness: csstype.Property.TextDecorationThickness<string | number>;
        textEmphasisColor: csstype.Property.TextEmphasisColor;
        textEmphasisPosition: csstype.Property.TextEmphasisPosition;
        textEmphasisStyle: csstype.Property.TextEmphasisStyle;
        textIndent: csstype.Property.TextIndent<string | number>;
        textJustify: csstype.Property.TextJustify;
        textOrientation: csstype.Property.TextOrientation;
        textOverflow: csstype.Property.TextOverflow;
        textRendering: csstype.Property.TextRendering;
        textShadow: csstype.Property.TextShadow;
        textSizeAdjust: csstype.Property.TextSizeAdjust;
        textTransform: csstype.Property.TextTransform;
        textUnderlineOffset: csstype.Property.TextUnderlineOffset<string | number>;
        textUnderlinePosition: csstype.Property.TextUnderlinePosition;
        top: csstype.Property.Top<string | number>;
        touchAction: csstype.Property.TouchAction;
        transform: csstype.Property.Transform;
        transformBox: csstype.Property.TransformBox;
        transformOrigin: csstype.Property.TransformOrigin<string | number>;
        transformStyle: csstype.Property.TransformStyle;
        transitionDelay: csstype.Property.TransitionDelay<string & {}>;
        transitionDuration: csstype.Property.TransitionDuration<string & {}>;
        transitionProperty: csstype.Property.TransitionProperty;
        transitionTimingFunction: csstype.Property.TransitionTimingFunction;
        translate: csstype.Property.Translate<string | number>;
        unicodeBidi: csstype.Property.UnicodeBidi;
        userSelect: csstype.Property.UserSelect;
        verticalAlign: csstype.Property.VerticalAlign<string | number>;
        viewTransitionName: csstype.Property.ViewTransitionName;
        visibility: csstype.Property.Visibility;
        whiteSpace: csstype.Property.WhiteSpace;
        widows: csstype.Property.Widows;
        width: csstype.Property.Width<string | number>;
        willChange: csstype.Property.WillChange;
        wordBreak: csstype.Property.WordBreak;
        wordSpacing: csstype.Property.WordSpacing<string | number>;
        wordWrap: csstype.Property.WordWrap;
        writingMode: csstype.Property.WritingMode;
        zIndex: csstype.Property.ZIndex;
        zoom: csstype.Property.Zoom;
        all: csstype.Globals;
        animation: csstype.Property.Animation<string & {}>;
        background: csstype.Property.Background<string | number>;
        backgroundPosition: csstype.Property.BackgroundPosition<string | number>;
        border: csstype.Property.Border<string | number>;
        borderBlock: csstype.Property.BorderBlock<string | number>;
        borderBlockEnd: csstype.Property.BorderBlockEnd<string | number>;
        borderBlockStart: csstype.Property.BorderBlockStart<string | number>;
        borderBottom: csstype.Property.BorderBottom<string | number>;
        borderColor: csstype.Property.BorderColor;
        borderImage: csstype.Property.BorderImage;
        borderInline: csstype.Property.BorderInline<string | number>;
        borderInlineEnd: csstype.Property.BorderInlineEnd<string | number>;
        borderInlineStart: csstype.Property.BorderInlineStart<string | number>;
        borderLeft: csstype.Property.BorderLeft<string | number>;
        borderRadius: csstype.Property.BorderRadius<string | number>;
        borderRight: csstype.Property.BorderRight<string | number>;
        borderStyle: csstype.Property.BorderStyle;
        borderTop: csstype.Property.BorderTop<string | number>;
        borderWidth: csstype.Property.BorderWidth<string | number>;
        caret: csstype.Property.Caret;
        columnRule: csstype.Property.ColumnRule<string | number>;
        columns: csstype.Property.Columns<string | number>;
        containIntrinsicSize: csstype.Property.ContainIntrinsicSize<string | number>;
        container: csstype.Property.Container;
        flex: csstype.Property.Flex<string | number>;
        flexFlow: csstype.Property.FlexFlow;
        font: csstype.Property.Font;
        gap: csstype.Property.Gap<string | number>;
        grid: csstype.Property.Grid;
        gridArea: csstype.Property.GridArea;
        gridColumn: csstype.Property.GridColumn;
        gridRow: csstype.Property.GridRow;
        gridTemplate: csstype.Property.GridTemplate;
        inset: csstype.Property.Inset<string | number>;
        insetBlock: csstype.Property.InsetBlock<string | number>;
        insetInline: csstype.Property.InsetInline<string | number>;
        lineClamp: csstype.Property.LineClamp;
        listStyle: csstype.Property.ListStyle;
        margin: csstype.Property.Margin<string | number>;
        marginBlock: csstype.Property.MarginBlock<string | number>;
        marginInline: csstype.Property.MarginInline<string | number>;
        mask: csstype.Property.Mask<string | number>;
        maskBorder: csstype.Property.MaskBorder;
        motion: csstype.Property.Offset<string | number>;
        offset: csstype.Property.Offset<string | number>;
        outline: csstype.Property.Outline<string | number>;
        overflow: csstype.Property.Overflow;
        overscrollBehavior: csstype.Property.OverscrollBehavior;
        padding: csstype.Property.Padding<string | number>;
        paddingBlock: csstype.Property.PaddingBlock<string | number>;
        paddingInline: csstype.Property.PaddingInline<string | number>;
        placeContent: csstype.Property.PlaceContent;
        placeItems: csstype.Property.PlaceItems;
        placeSelf: csstype.Property.PlaceSelf;
        scrollMargin: csstype.Property.ScrollMargin<string | number>;
        scrollMarginBlock: csstype.Property.ScrollMarginBlock<string | number>;
        scrollMarginInline: csstype.Property.ScrollMarginInline<string | number>;
        scrollPadding: csstype.Property.ScrollPadding<string | number>;
        scrollPaddingBlock: csstype.Property.ScrollPaddingBlock<string | number>;
        scrollPaddingInline: csstype.Property.ScrollPaddingInline<string | number>;
        scrollSnapMargin: csstype.Property.ScrollMargin<string | number>;
        scrollTimeline: csstype.Property.ScrollTimeline;
        textDecoration: csstype.Property.TextDecoration<string | number>;
        textEmphasis: csstype.Property.TextEmphasis;
        transition: csstype.Property.Transition<string & {}>;
        MozAnimationDelay: csstype.Property.AnimationDelay<string & {}>;
        MozAnimationDirection: csstype.Property.AnimationDirection;
        MozAnimationDuration: csstype.Property.AnimationDuration<string & {}>;
        MozAnimationFillMode: csstype.Property.AnimationFillMode;
        MozAnimationIterationCount: csstype.Property.AnimationIterationCount;
        MozAnimationName: csstype.Property.AnimationName;
        MozAnimationPlayState: csstype.Property.AnimationPlayState;
        MozAnimationTimingFunction: csstype.Property.AnimationTimingFunction;
        MozAppearance: csstype.Property.MozAppearance;
        MozBackfaceVisibility: csstype.Property.BackfaceVisibility;
        MozBinding: csstype.Property.MozBinding;
        MozBorderBottomColors: csstype.Property.MozBorderBottomColors;
        MozBorderEndColor: csstype.Property.BorderInlineEndColor;
        MozBorderEndStyle: csstype.Property.BorderInlineEndStyle;
        MozBorderEndWidth: csstype.Property.BorderInlineEndWidth<string | number>;
        MozBorderLeftColors: csstype.Property.MozBorderLeftColors;
        MozBorderRightColors: csstype.Property.MozBorderRightColors;
        MozBorderStartColor: csstype.Property.BorderInlineStartColor;
        MozBorderStartStyle: csstype.Property.BorderInlineStartStyle;
        MozBorderTopColors: csstype.Property.MozBorderTopColors;
        MozBoxSizing: csstype.Property.BoxSizing;
        MozColumnCount: csstype.Property.ColumnCount;
        MozColumnFill: csstype.Property.ColumnFill;
        MozColumnRuleColor: csstype.Property.ColumnRuleColor;
        MozColumnRuleStyle: csstype.Property.ColumnRuleStyle;
        MozColumnRuleWidth: csstype.Property.ColumnRuleWidth<string | number>;
        MozColumnWidth: csstype.Property.ColumnWidth<string | number>;
        MozContextProperties: csstype.Property.MozContextProperties;
        MozFontFeatureSettings: csstype.Property.FontFeatureSettings;
        MozFontLanguageOverride: csstype.Property.FontLanguageOverride;
        MozHyphens: csstype.Property.Hyphens;
        MozImageRegion: csstype.Property.MozImageRegion;
        MozMarginEnd: csstype.Property.MarginInlineEnd<string | number>;
        MozMarginStart: csstype.Property.MarginInlineStart<string | number>;
        MozOrient: csstype.Property.MozOrient;
        MozOsxFontSmoothing: csstype.Property.FontSmooth<string | number>;
        MozPaddingEnd: csstype.Property.PaddingInlineEnd<string | number>;
        MozPaddingStart: csstype.Property.PaddingInlineStart<string | number>;
        MozPerspective: csstype.Property.Perspective<string | number>;
        MozPerspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number>;
        MozStackSizing: csstype.Property.MozStackSizing;
        MozTabSize: csstype.Property.TabSize<string | number>;
        MozTextBlink: csstype.Property.MozTextBlink;
        MozTextSizeAdjust: csstype.Property.TextSizeAdjust;
        MozTransformOrigin: csstype.Property.TransformOrigin<string | number>;
        MozTransformStyle: csstype.Property.TransformStyle;
        MozTransitionDelay: csstype.Property.TransitionDelay<string & {}>;
        MozTransitionDuration: csstype.Property.TransitionDuration<string & {}>;
        MozTransitionProperty: csstype.Property.TransitionProperty;
        MozTransitionTimingFunction: csstype.Property.TransitionTimingFunction;
        MozUserFocus: csstype.Property.MozUserFocus;
        MozUserModify: csstype.Property.MozUserModify;
        MozUserSelect: csstype.Property.UserSelect;
        MozWindowDragging: csstype.Property.MozWindowDragging;
        MozWindowShadow: csstype.Property.MozWindowShadow;
        msAccelerator: csstype.Property.MsAccelerator;
        msBlockProgression: csstype.Property.MsBlockProgression;
        msContentZoomChaining: csstype.Property.MsContentZoomChaining;
        msContentZoomLimitMax: csstype.Property.MsContentZoomLimitMax;
        msContentZoomLimitMin: csstype.Property.MsContentZoomLimitMin;
        msContentZoomSnapPoints: csstype.Property.MsContentZoomSnapPoints;
        msContentZoomSnapType: csstype.Property.MsContentZoomSnapType;
        msContentZooming: csstype.Property.MsContentZooming;
        msFilter: csstype.Property.MsFilter;
        msFlexDirection: csstype.Property.FlexDirection;
        msFlexPositive: csstype.Property.FlexGrow;
        msFlowFrom: csstype.Property.MsFlowFrom;
        msFlowInto: csstype.Property.MsFlowInto;
        msGridColumns: csstype.Property.MsGridColumns<string | number>;
        msGridRows: csstype.Property.MsGridRows<string | number>;
        msHighContrastAdjust: csstype.Property.MsHighContrastAdjust;
        msHyphenateLimitChars: csstype.Property.MsHyphenateLimitChars;
        msHyphenateLimitLines: csstype.Property.MsHyphenateLimitLines;
        msHyphenateLimitZone: csstype.Property.MsHyphenateLimitZone<string | number>;
        msHyphens: csstype.Property.Hyphens;
        msImeAlign: csstype.Property.MsImeAlign;
        msLineBreak: csstype.Property.LineBreak;
        msOrder: csstype.Property.Order;
        msOverflowStyle: csstype.Property.MsOverflowStyle;
        msOverflowX: csstype.Property.OverflowX;
        msOverflowY: csstype.Property.OverflowY;
        msScrollChaining: csstype.Property.MsScrollChaining;
        msScrollLimitXMax: csstype.Property.MsScrollLimitXMax<string | number>;
        msScrollLimitXMin: csstype.Property.MsScrollLimitXMin<string | number>;
        msScrollLimitYMax: csstype.Property.MsScrollLimitYMax<string | number>;
        msScrollLimitYMin: csstype.Property.MsScrollLimitYMin<string | number>;
        msScrollRails: csstype.Property.MsScrollRails;
        msScrollSnapPointsX: csstype.Property.MsScrollSnapPointsX;
        msScrollSnapPointsY: csstype.Property.MsScrollSnapPointsY;
        msScrollSnapType: csstype.Property.MsScrollSnapType;
        msScrollTranslation: csstype.Property.MsScrollTranslation;
        msScrollbar3dlightColor: csstype.Property.MsScrollbar3dlightColor;
        msScrollbarArrowColor: csstype.Property.MsScrollbarArrowColor;
        msScrollbarBaseColor: csstype.Property.MsScrollbarBaseColor;
        msScrollbarDarkshadowColor: csstype.Property.MsScrollbarDarkshadowColor;
        msScrollbarFaceColor: csstype.Property.MsScrollbarFaceColor;
        msScrollbarHighlightColor: csstype.Property.MsScrollbarHighlightColor;
        msScrollbarShadowColor: csstype.Property.MsScrollbarShadowColor;
        msScrollbarTrackColor: csstype.Property.MsScrollbarTrackColor;
        msTextAutospace: csstype.Property.MsTextAutospace;
        msTextCombineHorizontal: csstype.Property.TextCombineUpright;
        msTextOverflow: csstype.Property.TextOverflow;
        msTouchAction: csstype.Property.TouchAction;
        msTouchSelect: csstype.Property.MsTouchSelect;
        msTransform: csstype.Property.Transform;
        msTransformOrigin: csstype.Property.TransformOrigin<string | number>;
        msTransitionDelay: csstype.Property.TransitionDelay<string & {}>;
        msTransitionDuration: csstype.Property.TransitionDuration<string & {}>;
        msTransitionProperty: csstype.Property.TransitionProperty;
        msTransitionTimingFunction: csstype.Property.TransitionTimingFunction;
        msUserSelect: csstype.Property.MsUserSelect;
        msWordBreak: csstype.Property.WordBreak;
        msWrapFlow: csstype.Property.MsWrapFlow;
        msWrapMargin: csstype.Property.MsWrapMargin<string | number>;
        msWrapThrough: csstype.Property.MsWrapThrough;
        msWritingMode: csstype.Property.WritingMode;
        WebkitAlignContent: csstype.Property.AlignContent;
        WebkitAlignItems: csstype.Property.AlignItems;
        WebkitAlignSelf: csstype.Property.AlignSelf;
        WebkitAnimationDelay: csstype.Property.AnimationDelay<string & {}>;
        WebkitAnimationDirection: csstype.Property.AnimationDirection;
        WebkitAnimationDuration: csstype.Property.AnimationDuration<string & {}>;
        WebkitAnimationFillMode: csstype.Property.AnimationFillMode;
        WebkitAnimationIterationCount: csstype.Property.AnimationIterationCount;
        WebkitAnimationName: csstype.Property.AnimationName;
        WebkitAnimationPlayState: csstype.Property.AnimationPlayState;
        WebkitAnimationTimingFunction: csstype.Property.AnimationTimingFunction;
        WebkitAppearance: csstype.Property.WebkitAppearance;
        WebkitBackdropFilter: csstype.Property.BackdropFilter;
        WebkitBackfaceVisibility: csstype.Property.BackfaceVisibility;
        WebkitBackgroundClip: csstype.Property.BackgroundClip;
        WebkitBackgroundOrigin: csstype.Property.BackgroundOrigin;
        WebkitBackgroundSize: csstype.Property.BackgroundSize<string | number>;
        WebkitBorderBeforeColor: csstype.Property.WebkitBorderBeforeColor;
        WebkitBorderBeforeStyle: csstype.Property.WebkitBorderBeforeStyle;
        WebkitBorderBeforeWidth: csstype.Property.WebkitBorderBeforeWidth<string | number>;
        WebkitBorderBottomLeftRadius: csstype.Property.BorderBottomLeftRadius<string | number>;
        WebkitBorderBottomRightRadius: csstype.Property.BorderBottomRightRadius<string | number>;
        WebkitBorderImageSlice: csstype.Property.BorderImageSlice;
        WebkitBorderTopLeftRadius: csstype.Property.BorderTopLeftRadius<string | number>;
        WebkitBorderTopRightRadius: csstype.Property.BorderTopRightRadius<string | number>;
        WebkitBoxDecorationBreak: csstype.Property.BoxDecorationBreak;
        WebkitBoxReflect: csstype.Property.WebkitBoxReflect<string | number>;
        WebkitBoxShadow: csstype.Property.BoxShadow;
        WebkitBoxSizing: csstype.Property.BoxSizing;
        WebkitClipPath: csstype.Property.ClipPath;
        WebkitColumnCount: csstype.Property.ColumnCount;
        WebkitColumnFill: csstype.Property.ColumnFill;
        WebkitColumnRuleColor: csstype.Property.ColumnRuleColor;
        WebkitColumnRuleStyle: csstype.Property.ColumnRuleStyle;
        WebkitColumnRuleWidth: csstype.Property.ColumnRuleWidth<string | number>;
        WebkitColumnSpan: csstype.Property.ColumnSpan;
        WebkitColumnWidth: csstype.Property.ColumnWidth<string | number>;
        WebkitFilter: csstype.Property.Filter;
        WebkitFlexBasis: csstype.Property.FlexBasis<string | number>;
        WebkitFlexDirection: csstype.Property.FlexDirection;
        WebkitFlexGrow: csstype.Property.FlexGrow;
        WebkitFlexShrink: csstype.Property.FlexShrink;
        WebkitFlexWrap: csstype.Property.FlexWrap;
        WebkitFontFeatureSettings: csstype.Property.FontFeatureSettings;
        WebkitFontKerning: csstype.Property.FontKerning;
        WebkitFontSmoothing: csstype.Property.FontSmooth<string | number>;
        WebkitFontVariantLigatures: csstype.Property.FontVariantLigatures;
        WebkitHyphenateCharacter: csstype.Property.HyphenateCharacter;
        WebkitHyphens: csstype.Property.Hyphens;
        WebkitInitialLetter: csstype.Property.InitialLetter;
        WebkitJustifyContent: csstype.Property.JustifyContent;
        WebkitLineBreak: csstype.Property.LineBreak;
        WebkitLineClamp: csstype.Property.WebkitLineClamp;
        WebkitMarginEnd: csstype.Property.MarginInlineEnd<string | number>;
        WebkitMarginStart: csstype.Property.MarginInlineStart<string | number>;
        WebkitMaskAttachment: csstype.Property.WebkitMaskAttachment;
        WebkitMaskBoxImageOutset: csstype.Property.MaskBorderOutset<string | number>;
        WebkitMaskBoxImageRepeat: csstype.Property.MaskBorderRepeat;
        WebkitMaskBoxImageSlice: csstype.Property.MaskBorderSlice;
        WebkitMaskBoxImageSource: csstype.Property.MaskBorderSource;
        WebkitMaskBoxImageWidth: csstype.Property.MaskBorderWidth<string | number>;
        WebkitMaskClip: csstype.Property.WebkitMaskClip;
        WebkitMaskComposite: csstype.Property.WebkitMaskComposite;
        WebkitMaskImage: csstype.Property.WebkitMaskImage;
        WebkitMaskOrigin: csstype.Property.WebkitMaskOrigin;
        WebkitMaskPosition: csstype.Property.WebkitMaskPosition<string | number>;
        WebkitMaskPositionX: csstype.Property.WebkitMaskPositionX<string | number>;
        WebkitMaskPositionY: csstype.Property.WebkitMaskPositionY<string | number>;
        WebkitMaskRepeat: csstype.Property.WebkitMaskRepeat;
        WebkitMaskRepeatX: csstype.Property.WebkitMaskRepeatX;
        WebkitMaskRepeatY: csstype.Property.WebkitMaskRepeatY;
        WebkitMaskSize: csstype.Property.WebkitMaskSize<string | number>;
        WebkitMaxInlineSize: csstype.Property.MaxInlineSize<string | number>;
        WebkitOrder: csstype.Property.Order;
        WebkitOverflowScrolling: csstype.Property.WebkitOverflowScrolling;
        WebkitPaddingEnd: csstype.Property.PaddingInlineEnd<string | number>;
        WebkitPaddingStart: csstype.Property.PaddingInlineStart<string | number>;
        WebkitPerspective: csstype.Property.Perspective<string | number>;
        WebkitPerspectiveOrigin: csstype.Property.PerspectiveOrigin<string | number>;
        WebkitPrintColorAdjust: csstype.Property.PrintColorAdjust;
        WebkitRubyPosition: csstype.Property.RubyPosition;
        WebkitScrollSnapType: csstype.Property.ScrollSnapType;
        WebkitShapeMargin: csstype.Property.ShapeMargin<string | number>;
        WebkitTapHighlightColor: csstype.Property.WebkitTapHighlightColor;
        WebkitTextCombine: csstype.Property.TextCombineUpright;
        WebkitTextDecorationColor: csstype.Property.TextDecorationColor;
        WebkitTextDecorationLine: csstype.Property.TextDecorationLine;
        WebkitTextDecorationSkip: csstype.Property.TextDecorationSkip;
        WebkitTextDecorationStyle: csstype.Property.TextDecorationStyle;
        WebkitTextEmphasisColor: csstype.Property.TextEmphasisColor;
        WebkitTextEmphasisPosition: csstype.Property.TextEmphasisPosition;
        WebkitTextEmphasisStyle: csstype.Property.TextEmphasisStyle;
        WebkitTextFillColor: csstype.Property.WebkitTextFillColor;
        WebkitTextOrientation: csstype.Property.TextOrientation;
        WebkitTextSizeAdjust: csstype.Property.TextSizeAdjust;
        WebkitTextStrokeColor: csstype.Property.WebkitTextStrokeColor;
        WebkitTextStrokeWidth: csstype.Property.WebkitTextStrokeWidth<string | number>;
        WebkitTextUnderlinePosition: csstype.Property.TextUnderlinePosition;
        WebkitTouchCallout: csstype.Property.WebkitTouchCallout;
        WebkitTransform: csstype.Property.Transform;
        WebkitTransformOrigin: csstype.Property.TransformOrigin<string | number>;
        WebkitTransformStyle: csstype.Property.TransformStyle;
        WebkitTransitionDelay: csstype.Property.TransitionDelay<string & {}>;
        WebkitTransitionDuration: csstype.Property.TransitionDuration<string & {}>;
        WebkitTransitionProperty: csstype.Property.TransitionProperty;
        WebkitTransitionTimingFunction: csstype.Property.TransitionTimingFunction;
        WebkitUserModify: csstype.Property.WebkitUserModify;
        WebkitUserSelect: csstype.Property.UserSelect;
        WebkitWritingMode: csstype.Property.WritingMode;
        MozAnimation: csstype.Property.Animation<string & {}>;
        MozBorderImage: csstype.Property.BorderImage;
        MozColumnRule: csstype.Property.ColumnRule<string | number>;
        MozColumns: csstype.Property.Columns<string | number>;
        MozTransition: csstype.Property.Transition<string & {}>;
        msContentZoomLimit: csstype.Property.MsContentZoomLimit;
        msContentZoomSnap: csstype.Property.MsContentZoomSnap;
        msFlex: csstype.Property.Flex<string | number>;
        msScrollLimit: csstype.Property.MsScrollLimit;
        msScrollSnapX: csstype.Property.MsScrollSnapX;
        msScrollSnapY: csstype.Property.MsScrollSnapY;
        msTransition: csstype.Property.Transition<string & {}>;
        WebkitAnimation: csstype.Property.Animation<string & {}>;
        WebkitBorderBefore: csstype.Property.WebkitBorderBefore<string | number>;
        WebkitBorderImage: csstype.Property.BorderImage;
        WebkitBorderRadius: csstype.Property.BorderRadius<string | number>;
        WebkitColumnRule: csstype.Property.ColumnRule<string | number>;
        WebkitColumns: csstype.Property.Columns<string | number>;
        WebkitFlex: csstype.Property.Flex<string | number>;
        WebkitFlexFlow: csstype.Property.FlexFlow;
        WebkitMask: csstype.Property.WebkitMask<string | number>;
        WebkitMaskBoxImage: csstype.Property.MaskBorder;
        WebkitTextEmphasis: csstype.Property.TextEmphasis;
        WebkitTextStroke: csstype.Property.WebkitTextStroke<string | number>;
        WebkitTransition: csstype.Property.Transition<string & {}>;
        azimuth: csstype.Property.Azimuth;
        boxAlign: csstype.Property.BoxAlign;
        boxDirection: csstype.Property.BoxDirection;
        boxFlex: csstype.Property.BoxFlex;
        boxFlexGroup: csstype.Property.BoxFlexGroup;
        boxLines: csstype.Property.BoxLines;
        boxOrdinalGroup: csstype.Property.BoxOrdinalGroup;
        boxOrient: csstype.Property.BoxOrient;
        boxPack: csstype.Property.BoxPack;
        clip: csstype.Property.Clip;
        gridColumnGap: csstype.Property.GridColumnGap<string | number>;
        gridGap: csstype.Property.GridGap<string | number>;
        gridRowGap: csstype.Property.GridRowGap<string | number>;
        imeMode: csstype.Property.ImeMode;
        offsetBlock: csstype.Property.InsetBlock<string | number>;
        offsetBlockEnd: csstype.Property.InsetBlockEnd<string | number>;
        offsetBlockStart: csstype.Property.InsetBlockStart<string | number>;
        offsetInline: csstype.Property.InsetInline<string | number>;
        offsetInlineEnd: csstype.Property.InsetInlineEnd<string | number>;
        offsetInlineStart: csstype.Property.InsetInlineStart<string | number>;
        scrollSnapCoordinate: csstype.Property.ScrollSnapCoordinate<string | number>;
        scrollSnapDestination: csstype.Property.ScrollSnapDestination<string | number>;
        scrollSnapPointsX: csstype.Property.ScrollSnapPointsX;
        scrollSnapPointsY: csstype.Property.ScrollSnapPointsY;
        scrollSnapTypeX: csstype.Property.ScrollSnapTypeX;
        scrollSnapTypeY: csstype.Property.ScrollSnapTypeY;
        KhtmlBoxAlign: csstype.Property.BoxAlign;
        KhtmlBoxDirection: csstype.Property.BoxDirection;
        KhtmlBoxFlex: csstype.Property.BoxFlex;
        KhtmlBoxFlexGroup: csstype.Property.BoxFlexGroup;
        KhtmlBoxLines: csstype.Property.BoxLines;
        KhtmlBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup;
        KhtmlBoxOrient: csstype.Property.BoxOrient;
        KhtmlBoxPack: csstype.Property.BoxPack;
        KhtmlLineBreak: csstype.Property.LineBreak;
        KhtmlOpacity: csstype.Property.Opacity;
        KhtmlUserSelect: csstype.Property.UserSelect;
        MozBackgroundClip: csstype.Property.BackgroundClip;
        MozBackgroundInlinePolicy: csstype.Property.BoxDecorationBreak;
        MozBackgroundOrigin: csstype.Property.BackgroundOrigin;
        MozBackgroundSize: csstype.Property.BackgroundSize<string | number>;
        MozBorderRadius: csstype.Property.BorderRadius<string | number>;
        MozBorderRadiusBottomleft: csstype.Property.BorderBottomLeftRadius<string | number>;
        MozBorderRadiusBottomright: csstype.Property.BorderBottomRightRadius<string | number>;
        MozBorderRadiusTopleft: csstype.Property.BorderTopLeftRadius<string | number>;
        MozBorderRadiusTopright: csstype.Property.BorderTopRightRadius<string | number>;
        MozBoxAlign: csstype.Property.BoxAlign;
        MozBoxDirection: csstype.Property.BoxDirection;
        MozBoxFlex: csstype.Property.BoxFlex;
        MozBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup;
        MozBoxOrient: csstype.Property.BoxOrient;
        MozBoxPack: csstype.Property.BoxPack;
        MozBoxShadow: csstype.Property.BoxShadow;
        MozFloatEdge: csstype.Property.MozFloatEdge;
        MozForceBrokenImageIcon: csstype.Property.MozForceBrokenImageIcon;
        MozOpacity: csstype.Property.Opacity;
        MozOutline: csstype.Property.Outline<string | number>;
        MozOutlineColor: csstype.Property.OutlineColor;
        MozOutlineRadius: csstype.Property.MozOutlineRadius<string | number>;
        MozOutlineRadiusBottomleft: csstype.Property.MozOutlineRadiusBottomleft<string | number>;
        MozOutlineRadiusBottomright: csstype.Property.MozOutlineRadiusBottomright<string | number>;
        MozOutlineRadiusTopleft: csstype.Property.MozOutlineRadiusTopleft<string | number>;
        MozOutlineRadiusTopright: csstype.Property.MozOutlineRadiusTopright<string | number>;
        MozOutlineStyle: csstype.Property.OutlineStyle;
        MozOutlineWidth: csstype.Property.OutlineWidth<string | number>;
        MozTextAlignLast: csstype.Property.TextAlignLast;
        MozTextDecorationColor: csstype.Property.TextDecorationColor;
        MozTextDecorationLine: csstype.Property.TextDecorationLine;
        MozTextDecorationStyle: csstype.Property.TextDecorationStyle;
        MozUserInput: csstype.Property.MozUserInput;
        msImeMode: csstype.Property.ImeMode;
        OAnimation: csstype.Property.Animation<string & {}>;
        OAnimationDelay: csstype.Property.AnimationDelay<string & {}>;
        OAnimationDirection: csstype.Property.AnimationDirection;
        OAnimationDuration: csstype.Property.AnimationDuration<string & {}>;
        OAnimationFillMode: csstype.Property.AnimationFillMode;
        OAnimationIterationCount: csstype.Property.AnimationIterationCount;
        OAnimationName: csstype.Property.AnimationName;
        OAnimationPlayState: csstype.Property.AnimationPlayState;
        OAnimationTimingFunction: csstype.Property.AnimationTimingFunction;
        OBackgroundSize: csstype.Property.BackgroundSize<string | number>;
        OBorderImage: csstype.Property.BorderImage;
        OObjectFit: csstype.Property.ObjectFit;
        OObjectPosition: csstype.Property.ObjectPosition<string | number>;
        OTabSize: csstype.Property.TabSize<string | number>;
        OTextOverflow: csstype.Property.TextOverflow;
        OTransform: csstype.Property.Transform;
        OTransformOrigin: csstype.Property.TransformOrigin<string | number>;
        OTransition: csstype.Property.Transition<string & {}>;
        OTransitionDelay: csstype.Property.TransitionDelay<string & {}>;
        OTransitionDuration: csstype.Property.TransitionDuration<string & {}>;
        OTransitionProperty: csstype.Property.TransitionProperty;
        OTransitionTimingFunction: csstype.Property.TransitionTimingFunction;
        WebkitBoxAlign: csstype.Property.BoxAlign;
        WebkitBoxDirection: csstype.Property.BoxDirection;
        WebkitBoxFlex: csstype.Property.BoxFlex;
        WebkitBoxFlexGroup: csstype.Property.BoxFlexGroup;
        WebkitBoxLines: csstype.Property.BoxLines;
        WebkitBoxOrdinalGroup: csstype.Property.BoxOrdinalGroup;
        WebkitBoxOrient: csstype.Property.BoxOrient;
        WebkitBoxPack: csstype.Property.BoxPack;
        WebkitScrollSnapPointsX: csstype.Property.ScrollSnapPointsX;
        WebkitScrollSnapPointsY: csstype.Property.ScrollSnapPointsY;
        alignmentBaseline: csstype.Property.AlignmentBaseline;
        baselineShift: csstype.Property.BaselineShift<string | number>;
        clipRule: csstype.Property.ClipRule;
        colorInterpolation: csstype.Property.ColorInterpolation;
        colorRendering: csstype.Property.ColorRendering;
        dominantBaseline: csstype.Property.DominantBaseline;
        fill: csstype.Property.Fill;
        fillOpacity: csstype.Property.FillOpacity;
        fillRule: csstype.Property.FillRule;
        floodColor: csstype.Property.FloodColor;
        floodOpacity: csstype.Property.FloodOpacity;
        glyphOrientationVertical: csstype.Property.GlyphOrientationVertical;
        lightingColor: csstype.Property.LightingColor;
        marker: csstype.Property.Marker;
        markerEnd: csstype.Property.MarkerEnd;
        markerMid: csstype.Property.MarkerMid;
        markerStart: csstype.Property.MarkerStart;
        shapeRendering: csstype.Property.ShapeRendering;
        stopColor: csstype.Property.StopColor;
        stopOpacity: csstype.Property.StopOpacity;
        stroke: csstype.Property.Stroke;
        strokeDasharray: csstype.Property.StrokeDasharray<string | number>;
        strokeDashoffset: csstype.Property.StrokeDashoffset<string | number>;
        strokeLinecap: csstype.Property.StrokeLinecap;
        strokeLinejoin: csstype.Property.StrokeLinejoin;
        strokeMiterlimit: csstype.Property.StrokeMiterlimit;
        strokeOpacity: csstype.Property.StrokeOpacity;
        strokeWidth: csstype.Property.StrokeWidth<string | number>;
        textAnchor: csstype.Property.TextAnchor;
        vectorEffect: csstype.Property.VectorEffect;
    }>>> | undefined;
};

declare const defaultUIObject: {
    Element: null;
    Body: null;
    Link: null;
    A: null;
    Text: null;
    P: null;
    H1: null;
    H2: null;
    H3: null;
    H4: null;
    H5: null;
    Article: null;
    Span: null;
    B: null;
    I: null;
    Address: null;
    Code: null;
    Button: null;
    Br: null;
    Marker: null;
    Main: null;
    Header: null;
    Footer: null;
    Section: null;
    Aside: null;
    Form: null;
    Menu: null;
    MenuItem: null;
    Select: null;
    Option: null;
    OptionGroup: null;
    Input: null;
    TextArea: null;
    Image: null;
    Img: null;
    Video: null;
    IFrame: null;
    Flex: null;
    FlexRow: null;
    FlexColumn: null;
    Grid: null;
};

declare const generateCssOverrides: (forComponent: keyof Omit<typeof defaultUIObject, "FlexRow" | "FlexColumn">, theme: UIThemeInterface) => Partial<typeof allCssRulesObject>;
declare const Element: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Body: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>, "ref"> & {
    ref?: ((instance: HTMLBodyElement | null) => void) | react.RefObject<HTMLBodyElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Link: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & {
    ref?: ((instance: HTMLAnchorElement | null) => void) | react.RefObject<HTMLAnchorElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const A: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & {
    ref?: ((instance: HTMLAnchorElement | null) => void) | react.RefObject<HTMLAnchorElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Text: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
    ref?: ((instance: HTMLParagraphElement | null) => void) | react.RefObject<HTMLParagraphElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const P: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
    ref?: ((instance: HTMLParagraphElement | null) => void) | react.RefObject<HTMLParagraphElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Span: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const H1: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
    ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const H2: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
    ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const H3: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
    ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const H4: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
    ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const H5: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
    ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Article: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const B: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const I: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Address: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Code: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Br: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLBRElement>, HTMLBRElement>, "ref"> & {
    ref?: ((instance: HTMLBRElement | null) => void) | react.RefObject<HTMLBRElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Marker: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.SVGProps<SVGMarkerElement>, "ref"> & {
    ref?: ((instance: SVGMarkerElement | null) => void) | react.RefObject<SVGMarkerElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Main: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Header: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Footer: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Section: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Aside: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Form: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, "ref"> & {
    ref?: ((instance: HTMLFormElement | null) => void) | react.RefObject<HTMLFormElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Menu: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.MenuHTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const MenuItem: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
    ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Select: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
    ref?: ((instance: HTMLSelectElement | null) => void) | react.RefObject<HTMLSelectElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Option: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>, "ref"> & {
    ref?: ((instance: HTMLOptionElement | null) => void) | react.RefObject<HTMLOptionElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const OptionGroup: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>, "ref"> & {
    ref?: ((instance: HTMLOptGroupElement | null) => void) | react.RefObject<HTMLOptGroupElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Button: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | react.RefObject<HTMLButtonElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Input: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & {
    ref?: ((instance: HTMLInputElement | null) => void) | react.RefObject<HTMLInputElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const TextArea: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, "ref"> & {
    ref?: ((instance: HTMLTextAreaElement | null) => void) | react.RefObject<HTMLTextAreaElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Image: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.SVGProps<SVGImageElement>, "ref"> & {
    ref?: ((instance: SVGImageElement | null) => void) | react.RefObject<SVGImageElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Img: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref"> & {
    ref?: ((instance: HTMLImageElement | null) => void) | react.RefObject<HTMLImageElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Video: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>, "ref"> & {
    ref?: ((instance: HTMLVideoElement | null) => void) | react.RefObject<HTMLVideoElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const IFrame: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>, "ref"> & {
    ref?: ((instance: HTMLIFrameElement | null) => void) | react.RefObject<HTMLIFrameElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const Flex: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
    ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
}, Partial<react.CSSProperties>>>;
declare const FlexRow: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<{
    hidden?: boolean | undefined;
    style?: react.CSSProperties | undefined;
    slot?: string | undefined;
    title?: string | undefined;
    key?: react.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
} & Partial<react.CSSProperties>, Partial<react.CSSProperties>>>;
declare const FlexColumn: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<{
    hidden?: boolean | undefined;
    style?: react.CSSProperties | undefined;
    slot?: string | undefined;
    title?: string | undefined;
    key?: react.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
} & Partial<react.CSSProperties>, Partial<react.CSSProperties>>>;
declare const Grid: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<{
    hidden?: boolean | undefined;
    style?: react.CSSProperties | undefined;
    slot?: string | undefined;
    title?: string | undefined;
    key?: react.Key | null | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "false" | "true") | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "false" | "true") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: react.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: react.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
    onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
    onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
    onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
    onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
    onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
    onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
    onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
    onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
    onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
    onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
    onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
    onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
    onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
    onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
    onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
    onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
    onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
    onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
    onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
    ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
} & Partial<react.CSSProperties>, Partial<react.CSSProperties>>>;
declare const UI: {
    Element: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Body: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>, "ref"> & {
        ref?: ((instance: HTMLBodyElement | null) => void) | react.RefObject<HTMLBodyElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Link: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & {
        ref?: ((instance: HTMLAnchorElement | null) => void) | react.RefObject<HTMLAnchorElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    A: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & {
        ref?: ((instance: HTMLAnchorElement | null) => void) | react.RefObject<HTMLAnchorElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Text: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
        ref?: ((instance: HTMLParagraphElement | null) => void) | react.RefObject<HTMLParagraphElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    P: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, "ref"> & {
        ref?: ((instance: HTMLParagraphElement | null) => void) | react.RefObject<HTMLParagraphElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    H1: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    H2: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    H3: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    H4: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    H5: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>, "ref"> & {
        ref?: ((instance: HTMLHeadingElement | null) => void) | react.RefObject<HTMLHeadingElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Article: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    B: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    I: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Address: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Code: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Br: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLBRElement>, HTMLBRElement>, "ref"> & {
        ref?: ((instance: HTMLBRElement | null) => void) | react.RefObject<HTMLBRElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Span: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & {
        ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Marker: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.SVGProps<SVGMarkerElement>, "ref"> & {
        ref?: ((instance: SVGMarkerElement | null) => void) | react.RefObject<SVGMarkerElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Main: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Header: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Footer: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Section: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Aside: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Form: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>, "ref"> & {
        ref?: ((instance: HTMLFormElement | null) => void) | react.RefObject<HTMLFormElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Menu: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.MenuHTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    MenuItem: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLElement>, HTMLElement>, "ref"> & {
        ref?: ((instance: HTMLElement | null) => void) | react.RefObject<HTMLElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Select: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>, "ref"> & {
        ref?: ((instance: HTMLSelectElement | null) => void) | react.RefObject<HTMLSelectElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Option: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>, "ref"> & {
        ref?: ((instance: HTMLOptionElement | null) => void) | react.RefObject<HTMLOptionElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    OptionGroup: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>, "ref"> & {
        ref?: ((instance: HTMLOptGroupElement | null) => void) | react.RefObject<HTMLOptGroupElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Button: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
        ref?: ((instance: HTMLButtonElement | null) => void) | react.RefObject<HTMLButtonElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Input: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & {
        ref?: ((instance: HTMLInputElement | null) => void) | react.RefObject<HTMLInputElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    TextArea: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>, "ref"> & {
        ref?: ((instance: HTMLTextAreaElement | null) => void) | react.RefObject<HTMLTextAreaElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Image: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.SVGProps<SVGImageElement>, "ref"> & {
        ref?: ((instance: SVGImageElement | null) => void) | react.RefObject<SVGImageElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Img: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>, "ref"> & {
        ref?: ((instance: HTMLImageElement | null) => void) | react.RefObject<HTMLImageElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Video: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>, "ref"> & {
        ref?: ((instance: HTMLVideoElement | null) => void) | react.RefObject<HTMLVideoElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    IFrame: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>, "ref"> & {
        ref?: ((instance: HTMLIFrameElement | null) => void) | react.RefObject<HTMLIFrameElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    Flex: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<Omit<react.DetailedHTMLProps<react.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
    }, Partial<react.CSSProperties>>>;
    FlexRow: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<{
        hidden?: boolean | undefined;
        style?: react.CSSProperties | undefined;
        slot?: string | undefined;
        title?: string | undefined;
        key?: react.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: react.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: react.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
    } & Partial<react.CSSProperties>, Partial<react.CSSProperties>>>;
    FlexColumn: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<{
        hidden?: boolean | undefined;
        style?: react.CSSProperties | undefined;
        slot?: string | undefined;
        title?: string | undefined;
        key?: react.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: react.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: react.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
    } & Partial<react.CSSProperties>, Partial<react.CSSProperties>>>;
    Grid: styled_components.IStyledComponent<"web", styled_components_dist_types.Substitute<{
        hidden?: boolean | undefined;
        style?: react.CSSProperties | undefined;
        slot?: string | undefined;
        title?: string | undefined;
        key?: react.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "false" | "true") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "false" | "true") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "false" | "true") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: react.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "false" | "true") | undefined;
        "aria-autocomplete"?: "both" | "none" | "inline" | "list" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "false" | "true") | undefined;
        "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "false" | "true") | undefined;
        "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "false" | "true") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "false" | "true") | undefined;
        "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree" | undefined;
        "aria-hidden"?: (boolean | "false" | "true") | undefined;
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "false" | "true") | undefined;
        "aria-multiline"?: (boolean | "false" | "true") | undefined;
        "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
        "aria-readonly"?: (boolean | "false" | "true") | undefined;
        "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "false" | "true") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "false" | "true") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: react.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: react.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: react.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: react.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: react.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: react.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: react.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: react.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: react.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: react.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResize?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onResizeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: react.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: react.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: react.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: react.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: react.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: react.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: react.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: react.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: react.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: react.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: react.TransitionEventHandler<HTMLDivElement> | undefined;
        ref?: ((instance: HTMLDivElement | null) => void) | react.RefObject<HTMLDivElement> | null | undefined;
    } & Partial<react.CSSProperties>, Partial<react.CSSProperties>>>;
};

type UIType = typeof UI;

interface PropsInterface {
    theme: Partial<UIThemeInterface>;
}
declare const UIThemeProvider: FC<PropsWithChildren & PropsInterface>;

export { A, Address, Article, Aside, B, Body, Br, Button, Code, DefaulColorsInterface, DefaultSpacingsInterface, Element, Flex, FlexColumn, FlexRow, Footer, Form, Grid, H1, H2, H3, H4, H5, Header, I, IFrame, Image, Img, Input, Link, Main, Marker, Menu, MenuItem, Option, OptionGroup, OveridesType, P, Section, Select, SizingsInterface, Span, Text, TextArea, UIThemeInterface, UIThemeProvider, UIType, Video, createUITheme, generateCssOverrides };
